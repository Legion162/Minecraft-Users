(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('undici-shim'), require('net')) :
  typeof define === 'function' && define.amd ? define(['exports', 'undici-shim', 'net'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.mojanglib = {}, global.undici, global.net));
})(this, (function (exports, undiciShim, net) { 'use strict';

  var __defProp$i = Object.defineProperty;
  var __defNormalProp$i = (obj, key, value) => key in obj ? __defProp$i(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$i = (obj, key, value) => {
    __defNormalProp$i(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class MCAPIError extends Error {
    constructor(httpCode, ...params) {
      super(...params);
      __publicField$i(this, "code");
      __publicField$i(this, "date");
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, MCAPIError);
      this.code = httpCode;
      this.date = /* @__PURE__ */ new Date();
    }
  }

  var __defProp$h = Object.defineProperty;
  var __defNormalProp$h = (obj, key, value) => key in obj ? __defProp$h(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$h = (obj, key, value) => {
    __defNormalProp$h(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class MinecraftPacket {
    constructor() {
      __publicField$h(this, "_buffer", Buffer.from(new Array(1)));
      __publicField$h(this, "_cursor", 0);
      __publicField$h(this, "addToBuffer", (num) => {
        if (this.cursor + num > this.buffer.length)
          this._buffer = Buffer.concat([this.buffer, Buffer.from(new Array(num))]);
      });
    }
    get buffer() {
      return this._buffer;
    }
    get cursor() {
      return this._cursor;
    }
    writeVarInt(val) {
      do {
        var tmp = val & 127;
        val >>>= 7;
        tmp |= val != 0 ? 128 : 0;
        this.writeUByte(tmp);
      } while (val != 0);
    }
    writeUByte(val) {
      this.addToBuffer(1);
      this._buffer.writeUInt8(val, this.cursor);
      this._cursor++;
    }
    writeString(val) {
      const len = val.length;
      this.writeVarInt(len);
      this.addToBuffer(len);
      this.buffer.write(val, this.cursor, len, "utf8");
      this._cursor += len;
    }
    writeUShort(val) {
      this.writeUByte(val >> 8);
      this.writeUByte(val & 255);
    }
    readVarInt() {
      let cursor = 1;
      let value = 0;
      do {
        var read = this.buffer.readUInt8(this.cursor + cursor);
        value |= (read & 127) << cursor * 7;
        cursor++;
      } while ((read & 128) === 128);
      this._cursor += cursor;
      return value;
    }
    readString() {
      const len = this.readVarInt();
      return this.buffer.toString("utf8", this.cursor, this._cursor += len);
    }
    send(socket) {
      const length_packet = new MinecraftPacket();
      length_packet.writeVarInt(this.buffer.length);
      socket.write(Buffer.concat([length_packet.buffer, this.buffer]));
    }
  }

  var __defProp$g = Object.defineProperty;
  var __defNormalProp$g = (obj, key, value) => key in obj ? __defProp$g(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$g = (obj, key, value) => {
    __defNormalProp$g(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async$6 = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  const _Requests = class _Requests {
    /**
     * Pings a Minecraft server asynchronously and returns a raw object with server data.
     * Should not be called when running outside of a Node process.
     * 
     * Used internally to create a new Server instance.
     * ```
     * const server = new Server(data, host, port)
     * console.log(server.players)
     * ```
     *
     * @internal
     * @param address  The server IP address
     * @param port     The server port number
     * @param protocol The protocol to use for the ping
     * @param timeout  Duration in ms before the connection times out
     */
    static sendServerPing(pingParams) {
      return new Promise((resolve, reject) => {
        const { address, port, protocol, timeout } = pingParams, totalReadingDataBuffer = new MinecraftPacket();
        const client = net.connect({
          host: address,
          port,
          timeout: timeout || this.SOCKET_TIMEOUT
        }, () => {
          const handshake = new MinecraftPacket();
          handshake.writeVarInt(0);
          handshake.writeVarInt(protocol);
          handshake.writeString(address);
          handshake.writeUShort(port);
          handshake.writeVarInt(1);
          handshake.send(client);
          const legacyPing = new MinecraftPacket();
          legacyPing.writeVarInt(0);
          legacyPing.send(client);
        });
        client.on("data", (data) => {
          totalReadingDataBuffer._buffer = Buffer.concat([totalReadingDataBuffer.buffer, data]);
          client.end();
        });
        client.on("close", () => {
          totalReadingDataBuffer.readVarInt();
          const res = totalReadingDataBuffer.readString();
          const data = JSON.parse(res);
          resolve(data);
        });
        client.on("timeout", () => {
          client.destroy();
          reject(new MCAPIError(408, "Timed out"));
        });
        client.on("error", (e) => {
          client.destroy();
          reject(e);
        });
      });
    }
  };
  __publicField$g(_Requests, "send", (url, opts, method) => __async$6(_Requests, null, function* () {
    const options = null;
    if (method)
      options.method = method;
    if (opts == null ? void 0 : opts.payload)
      options.body = opts.payload;
    if (opts == null ? void 0 : opts.headers)
      options.headers = opts.headers || {
        Authorization: `Bearer ${opts}`
      };
    const isBrowser = typeof window === "object";
    if (isBrowser)
      url = `https://corsproxy.io/?${encodeURIComponent(url)}`;
    return yield undiciShim.request(url, options);
  }));
  /**
   * Sends an HTTP `GET` request to the inputted URL.
   *
   * @internal
   * @param url The URL to send the request to.
   * @param opts The options that will be used in the request. (Optional)
   */
  __publicField$g(_Requests, "GET", (url, opts) => _Requests.send(url, opts));
  /**
   * Sends an HTTP `POST` request to the inputted URL.
   *
   * @internal
   * @param url The URL to send the request to.
   * @param opts The options that will be used in the request. (Optional)
   */
  __publicField$g(_Requests, "POST", (url, opts) => _Requests.send(url, opts, "POST"));
  /**
   * Sends an HTTP `DELETE` request to the inputted URL.
   *
   * @internal
   * @param url The URL to send the request to.
   * @param opts The options that will be used in the request. (Optional)
   */
  __publicField$g(_Requests, "DELETE", (url, opts) => _Requests.send(url, opts, "DELETE"));
  __publicField$g(_Requests, "SOCKET_TIMEOUT", 3e5);
  let Requests = _Requests;

  var __defProp$f = Object.defineProperty;
  var __defNormalProp$f = (obj, key, value) => key in obj ? __defProp$f(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$f = (obj, key, value) => {
    __defNormalProp$f(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class Player {
    constructor(data) {
      __publicField$f(this, "uuid");
      __publicField$f(this, "username");
      __publicField$f(this, "properties");
      this.uuid = data.id;
      this.username = data.name;
      this.properties = data.properties;
    }
  }

  const Base64 = {
    encode: (data) => Buffer.from(data, "utf8").toString("base64"),
    decode: (data) => Buffer.from(data, "base64").toString("utf-8")
  };
  const isNode = () => {
    var _a;
    return typeof process !== "undefined" && ((_a = process == null ? void 0 : process.versions) == null ? void 0 : _a.node);
  };

  var __defProp$e = Object.defineProperty;
  var __defNormalProp$e = (obj, key, value) => key in obj ? __defProp$e(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$e = (obj, key, value) => {
    __defNormalProp$e(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class RegularPlayerTextures {
    constructor(textureData) {
      __publicField$e(this, "skin_url");
      __publicField$e(this, "cape_url");
      __publicField$e(this, "slim");
      __publicField$e(this, "uploadedAt");
      __publicField$e(this, "getAttributes", () => ({ skinURL: this.skin_url, slim: this.slim }));
      __publicField$e(this, "setAttributes", (slim, skinUrl) => {
        this.slim = slim;
        this.skin_url = skinUrl;
      });
      var _a;
      const { textures, timestamp } = JSON.parse(Base64.decode(textureData));
      const skinTex = textures.SKIN, capeTex = textures.CAPE;
      this.skin_url = skinTex == null ? void 0 : skinTex.url;
      this.cape_url = capeTex == null ? void 0 : capeTex.url;
      this.slim = ((_a = skinTex == null ? void 0 : skinTex.metadata) == null ? void 0 : _a.model) === "slim";
      this.uploadedAt = timestamp;
    }
  }

  var __defProp$d = Object.defineProperty;
  var __defNormalProp$d = (obj, key, value) => key in obj ? __defProp$d(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$d = (obj, key, value) => {
    __defNormalProp$d(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class RegularPlayer extends Player {
    constructor(playerData, logged = false) {
      super(playerData);
      __publicField$d(this, "legacy");
      __publicField$d(this, "demo");
      __publicField$d(this, "textures");
      const { legacy, demo, properties } = playerData;
      this.legacy = legacy || false;
      this.demo = demo || false;
      if (!logged) {
        const texturesProp = properties == null ? void 0 : properties.find((prop) => prop.name === "textures");
        if (texturesProp == null ? void 0 : texturesProp.value)
          this.textures = new RegularPlayerTextures(texturesProp.value);
      }
    }
  }

  var __defProp$c = Object.defineProperty;
  var __defNormalProp$c = (obj, key, value) => key in obj ? __defProp$c(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$c = (obj, key, value) => {
    __defNormalProp$c(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async$5 = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  class MCAPI_PLAYERS {
    /**
     * Get profile info of an unlogged user
     * @param username The user's name
     */
    static get(username, raw = false) {
      return __async$5(this, null, function* () {
        try {
          const res = yield Requests.GET("https://api.mojang.com/users/profiles/minecraft/" + username);
          const json = yield res.body.json();
          return yield this.getByUUID(json.id, raw);
        } catch (e) {
          this.handleError(
            e,
            "[UUID Fetcher] - Username not recognized",
            "[UUID Fetcher] - You have reached the API request limit"
          );
          return null;
        }
      });
    }
    /**
     * Get profile info of an unlogged user by UUID.
     * @param uuid The user's uuid
     */
    static getByUUID(uuid, raw) {
      return __async$5(this, null, function* () {
        try {
          const res = yield Requests.GET("https://sessionserver.mojang.com/session/minecraft/profile/" + uuid);
          const userData = yield res.body.json();
          return raw ? userData : new RegularPlayer(userData);
        } catch (e) {
          this.handleError(
            e,
            "[Textures Fetcher] - UUID not recognized",
            "[Textures Fetcher] - You have reached the API request limit"
          );
          return null;
        }
      });
    }
  }
  __publicField$c(MCAPI_PLAYERS, "handleError", (err, msg1, msg2) => {
    if (err instanceof MCAPIError) {
      const msg = err.code == 429 ? msg2 : msg1;
      err = new MCAPIError(err.code, msg);
    }
    console.error(err);
  });

  var __defProp$b = Object.defineProperty;
  var __defNormalProp$b = (obj, key, value) => key in obj ? __defProp$b(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$b = (obj, key, value) => {
    __defNormalProp$b(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class ServerPlayers {
    constructor(data) {
      __publicField$b(this, "max");
      __publicField$b(this, "online");
      __publicField$b(this, "list");
      var _a;
      this.max = data.max;
      this.online = data.online;
      this.list = (_a = data.list) == null ? void 0 : _a.map((pl) => new Player(pl));
    }
  }

  var __defProp$a = Object.defineProperty;
  var __defNormalProp$a = (obj, key, value) => key in obj ? __defProp$a(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$a = (obj, key, value) => {
    __defNormalProp$a(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck$1 = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet$1 = (obj, member, getter) => {
    __accessCheck$1(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd$1 = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet$1 = (obj, member, value, setter) => {
    __accessCheck$1(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod = (obj, member, method) => {
    __accessCheck$1(obj, member, "access private method");
    return method;
  };
  var __async$4 = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var _host, _port, _icon, _version, _protocol, _players, _title, _motd, _online, _init, init_fn;
  const remove_start_end_spaces = (str) => str.replace(/^ {1,}| {1,}$/g, "");
  const formatMOTD = (motd) => {
    if (!motd)
      return "";
    const lines = motd.split(/\n|\r/g);
    return lines.map((line) => {
      line = remove_start_end_spaces(line);
      return line;
    }).join("\n");
  };
  class Server {
    constructor(data, host = "localhost", port = 25565) {
      __privateAdd$1(this, _init);
      /**
       * The hostname of the server, e.g. `play.example.net:3000`.
       * @defaultValue `localhost`
       * @readonly
       */
      __privateAdd$1(this, _host, void 0);
      /**
       * The port used by the server.
       * @defaultValue `25565`
       * @readonly
       */
      __privateAdd$1(this, _port, void 0);
      /**
       * The server icon in the form of a {@link Blob}.
       * @readonly
       */
      __privateAdd$1(this, _icon, void 0);
      /**
       * The version (or range) this server supports.
       * @readonly
       */
      __privateAdd$1(this, _version, void 0);
      /**
       * The protocol version number of this server, used to check for incompatibilites
       * between the player's client and the server they are trying to connect to.
       * 
       * @see {@link https://wiki.vg/Protocol_version_numbers List of protocol/version mappings.}
       * @readonly
       */
      __privateAdd$1(this, _protocol, void 0);
      /**
       * The instance of {@link ServerPlayers}
       * @readonly
       */
      __privateAdd$1(this, _players, void 0);
      /**
       * The title configured by this server, as shown above the MOTD.
       * @readonly
       */
      __privateAdd$1(this, _title, void 0);
      /**
       * The 'Message of the Day' configured by this server, a.k.a the description
       * shown below the title when connecting via the server list.
       * @readonly
       */
      __privateAdd$1(this, _motd, void 0);
      /**
       * Denotes whether this server is up and not offline.
       * @readonly
       */
      __privateAdd$1(this, _online, void 0);
      __publicField$a(this, "refresh", () => __async$4(this, null, function* () {
        const data = yield MCAPI_SERVERS.ping(__privateGet$1(this, _host), __privateGet$1(this, _port));
        __privateMethod(this, _init, init_fn).call(this, data);
      }));
      if (!data)
        throw new Error(`[Server Constructor] - Parameter 'data' is ${data}`);
      __privateSet$1(this, _host, host);
      __privateSet$1(this, _port, port);
      __privateMethod(this, _init, init_fn).call(this, data);
    }
    get host() {
      return __privateGet$1(this, _host);
    }
    get port() {
      return __privateGet$1(this, _port);
    }
    get icon() {
      return __privateGet$1(this, _icon);
    }
    get version() {
      return __privateGet$1(this, _version);
    }
    get protocol() {
      return __privateGet$1(this, _protocol);
    }
    get players() {
      return __privateGet$1(this, _players);
    }
    get title() {
      return __privateGet$1(this, _title);
    }
    get motd() {
      return __privateGet$1(this, _motd);
    }
    get online() {
      return __privateGet$1(this, _online);
    }
  }
  _host = new WeakMap();
  _port = new WeakMap();
  _icon = new WeakMap();
  _version = new WeakMap();
  _protocol = new WeakMap();
  _players = new WeakMap();
  _title = new WeakMap();
  _motd = new WeakMap();
  _online = new WeakMap();
  _init = new WeakSet();
  init_fn = function(data) {
    const {
      online,
      icon,
      players,
      motd,
      version,
      protocol
    } = data;
    __privateSet$1(this, _online, online);
    __privateSet$1(this, _version, version);
    __privateSet$1(this, _protocol, protocol);
    __privateSet$1(this, _icon, icon);
    __privateSet$1(this, _players, new ServerPlayers(players));
    if (motd) {
      const title = motd.raw[0];
      const motdText = motd.raw[1];
      __privateSet$1(this, _title, title);
      __privateSet$1(this, _motd, {
        raw: motdText || "",
        formatted: formatMOTD(motdText)
      });
    }
  };

  var __defProp$9 = Object.defineProperty;
  var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$9 = (obj, key, value) => {
    __defNormalProp$9(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async$3 = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  const _MCAPI_SERVERS = class _MCAPI_SERVERS {
  };
  /**
   * The list of blocked servers. 
   * Expressed as SHA1 encoded IP addresses.
   * 
   * @see
   * Refer to the '*Blocked Servers*' section of {@link https://wiki.vg/Mojang_API#Blocked_Servers | the wiki}.
   */
  __publicField$9(_MCAPI_SERVERS, "blockedServers", () => __async$3(_MCAPI_SERVERS, null, function* () {
    const serverList = yield Requests.GET("https://sessionserver.mojang.com/blockedservers").then((res) => res.body.text()).catch(console.error);
    if (!serverList)
      return null;
    return serverList.split("\n");
  }));
  /**
   * Pings and retreives info on the requested server.
   *
   * @param host The server IP or hostname.
   * Supports attaching the port number, e.g. `play.example.net:3000`
   * 
   * @param port The server port number.
   * If not specified, the ":port" postfix in the `host` string is used. 
   * Otherwise, it will fallback to the default of `25565`.
   */
  __publicField$9(_MCAPI_SERVERS, "get", (host, port) => __async$3(_MCAPI_SERVERS, null, function* () {
    const data = yield _MCAPI_SERVERS.ping(host, port);
    return new Server(data, host, port);
  }));
  /**
   * @internal
   */
  __publicField$9(_MCAPI_SERVERS, "ping", (host, port) => __async$3(_MCAPI_SERVERS, null, function* () {
    const arr = host.split(":");
    const address = arr[0];
    if (isNode()) {
      if (!port)
        port = arr.length > 1 ? parseInt(arr[1]) : 25565;
      return yield Requests.sendServerPing({ address, port }).catch((e) => {
        console.error(e);
        return null;
      });
    }
    const url = `https://api.mcsrvstat.us/3/${address}`;
    const res = yield fetch(url).catch(console.error);
    return res ? yield res.json() : null;
  }));
  let MCAPI_SERVERS = _MCAPI_SERVERS;

  var __defProp$8 = Object.defineProperty;
  var __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$8 = (obj, key, value) => {
    __defNormalProp$8(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class MojangAccountProperties {
    constructor(data) {
      __publicField$8(this, "suspended");
      __publicField$8(this, "blocked");
      __publicField$8(this, "secured");
      __publicField$8(this, "legacy");
      __publicField$8(this, "migrated");
      __publicField$8(this, "migratedUser");
      __publicField$8(this, "hashed");
      __publicField$8(this, "emailVerified");
      __publicField$8(this, "parentVerified");
      const { user } = data;
      this.suspended = user.suspended;
      this.blocked = user.blocked;
      this.secured = user.secured;
      this.legacy = user.legacyUser;
      this.migrated = user.migrated;
      this.migratedUser = user.fromMigratedUser;
      this.hashed = user.hashed;
      this.emailVerified = user.emailVerified;
      this.parentVerified = user.verifiedByParent;
    }
  }

  var __defProp$7 = Object.defineProperty;
  var __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$7 = (obj, key, value) => {
    __defNormalProp$7(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class GameProfile {
    constructor(data, associated_account) {
      __publicField$7(this, "account");
      __publicField$7(this, "created");
      __publicField$7(this, "game");
      __publicField$7(this, "uuid");
      __publicField$7(this, "username");
      __publicField$7(this, "token");
      const { createdAt, agent, id, name, tokenId } = data;
      this.account = associated_account;
      this.created = new Date(createdAt);
      this.game = agent;
      this.uuid = id;
      this.username = name;
      this.token = tokenId;
    }
  }

  var skins = {
  	list: "https://api.minecraftservices.com/minecraft/profile/skins",
  	active: "https://api.minecraftservices.com/minecraft/profile/skins/active"
  };

  var __defProp$6 = Object.defineProperty;
  var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$6 = (obj, key, value) => {
    __defNormalProp$6(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __async$2 = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var _authHeader;
  class LoggedPlayerTextures extends RegularPlayerTextures {
    constructor(data, associatedAcc) {
      super(data);
      __publicField$6(this, "associatedAccount");
      __privateAdd(this, _authHeader, void 0);
      /**
       * @public
       * Removes the current skin and sets it to default (Steve).
       */
      __publicField$6(this, "resetSkin", () => __async$2(this, null, function* () {
        const res = yield Requests.DELETE(skins.active, { headers: __privateGet(this, _authHeader) });
        if (res instanceof MCAPIError) {
          if (res.code === 429) {
            console.error(new MCAPIError(429, "[Skin Reset] - You have reached the API request limit"));
            return false;
          }
        }
        if (res.statusCode !== 204) {
          console.error(new MCAPIError(res.statusCode, "[Skin Reset] - An error occurred sending request."));
          return false;
        }
        this.skin_url = null;
        return true;
      }));
      /**
       * Upload a skin to Mojang servers.
       * 
       * **NOTE** - This will also overwrite the currently active skin!
       * 
       * @param file The PNG file that will be uploaded.
       * @param slim Whether or not the skin should be slim or classic.
       * 
       * @returns
       * A {@link Boolean} indicatating if the upload was successful,
       * `false` is also returned if the file input is not a valid PNG.
       */
      __publicField$6(this, "uploadSkin", (file, slim = false) => __async$2(this, null, function* () {
        if (!file) {
          console.error(new MCAPIError(400, `A valid PNG file must be provided! '${file}' was passed.`));
          return false;
        }
        const res = yield Requests.POST(skins.list, { payload: file, headers: __privateGet(this, _authHeader) });
        if (!res) {
          console.error(new MCAPIError(404, `[Upload Skin] - Could not send the request, received ${res}`));
          return false;
        }
        return true;
      }));
      /**
       * 
       * @param url The URL of the new skin, e.g. http://assets.mojang.com/SkinTemplates/steve.png
       * @param slim Whether or not the skin should be slim or classic.
       * 
       * @beta
       */
      __publicField$6(this, "useSkinFromURL", (url, slim = false) => __async$2(this, null, function* () {
        var _a;
        if (!url) {
          console.error(new MCAPIError(400, `Valid URL must be provided! '${url}' was passed.`));
          return false;
        }
        const _slim = slim || ((_a = this.slim) != null ? _a : false);
        const body = `variant="${_slim ? "slim" : "classic"}"&url=${url}`;
        const res = yield Requests.POST(skins.list, { payload: body, headers: __privateGet(this, _authHeader) }).then(() => {
          this.setAttributes(_slim, url);
          return true;
        }).catch((err) => {
          if (!(err instanceof MCAPIError)) {
            console.error(err);
            return false;
          }
          if (err.code === 204) {
            this.setAttributes(_slim, url);
            return true;
          }
          const errPrefix = "[Skin from URL] - ";
          const msg = err.code === 429 ? `You have reached the API request limit` : `The image couldn't be retrieved from the url`;
          console.error(new MCAPIError(err.code, `${errPrefix}${msg}`));
          return false;
        });
        return res;
      }));
      this.associatedAccount = associatedAcc;
      __privateSet(this, _authHeader, {
        Authorization: `Bearer ${associatedAcc.tokens.access}`
      });
    }
  }
  _authHeader = new WeakMap();

  var __defProp$5 = Object.defineProperty;
  var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$5 = (obj, key, value) => {
    __defNormalProp$5(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class LoggedPlayer extends RegularPlayer {
    constructor(playerData, associated_account) {
      var _a;
      super(playerData, true);
      __publicField$5(this, "associated_account");
      this.associated_account = associated_account;
      const texturesProp = (_a = playerData.properties) == null ? void 0 : _a.find((prop) => prop.name === "textures");
      if (texturesProp == null ? void 0 : texturesProp.value)
        this.textures = new LoggedPlayerTextures(texturesProp.value, associated_account);
    }
  }

  var __defProp$4 = Object.defineProperty;
  var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$4 = (obj, key, value) => {
    __defNormalProp$4(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async$1 = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  class MinecraftProfile extends GameProfile {
    constructor(data, associated_account) {
      super(data, associated_account);
      __publicField$4(this, "legacy");
      __publicField$4(this, "suspended");
      __publicField$4(this, "premium");
      __publicField$4(this, "migrated");
      __publicField$4(this, "player");
      __publicField$4(this, "loadPlayer", () => __async$1(this, null, function* () {
        const data = yield MCAPI_PLAYERS.get(this.username, true);
        Object.defineProperty(this, "player", {
          value: new LoggedPlayer(data, this.account),
          writable: false,
          configurable: false
        });
      }));
      __publicField$4(this, "changeName", () => __async$1(this, null, function* () {
      }));
      __publicField$4(this, "isNameAvailable", () => __async$1(this, null, function* () {
      }));
      this.legacy = data.legacyProfile;
      this.suspended = data.suspended;
      this.premium = data.paid;
      this.migrated = data.migrated;
    }
  }

  class OtherProfile extends GameProfile {
    constructor(data, associated_account) {
      super(data, associated_account);
      Object.assign(this, data);
    }
  }

  var __defProp$3 = Object.defineProperty;
  var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$3 = (obj, key, value) => {
    __defNormalProp$3(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class MojangAccountProfiles {
    constructor(data, associated_account) {
      __publicField$3(this, "list");
      __publicField$3(this, "selected");
      var _a;
      const profiles = (_a = data.availableProfiles) != null ? _a : [];
      for (const profile of profiles) {
        const gameProfile = profile.agent === "minecraft" ? new MinecraftProfile(profile, associated_account) : new OtherProfile(profile, associated_account);
        this.list.push(gameProfile);
        if (profile.id === data.selectedProfile.id)
          this.selected = gameProfile;
      }
    }
  }

  var __defProp$2 = Object.defineProperty;
  var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$2 = (obj, key, value) => {
    __defNormalProp$2(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class MojangAccount {
    constructor(data) {
      /**
       * @internal
       */
      __publicField$2(this, "tokens");
      __publicField$2(this, "registration");
      __publicField$2(this, "account_id");
      __publicField$2(this, "username");
      __publicField$2(this, "email");
      __publicField$2(this, "properties");
      __publicField$2(this, "profiles");
      this.tokens = {
        access: data.accessToken,
        client: data.clientToken
      };
      this.account_id = data.user.id;
      this.email = data.user.email;
      this.username = data.user.username;
      this.registration = {
        ip: data.user.registerIp,
        date: new Date(data.user.registeredAt)
      };
      this.properties = new MojangAccountProperties(data);
      this.profiles = new MojangAccountProfiles(data, this);
    }
  }

  var __defProp$1 = Object.defineProperty;
  var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField$1 = (obj, key, value) => {
    __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  class MCAPI_ACCOUNTS {
    constructor() {
      __publicField$1(this, "loadAll", false);
    }
    static get loadAll() {
      return this.loadAll;
    }
    static set loadAll(value) {
      if (!value)
        this.loadAll = value;
    }
    /**
     * Allows a user to login to their Mojang account.
     *
     * @public 
     * @param identity The email or username (legacy accounts) of the user
     * @param password The password of the user
     * 
     */
    static login(identity, password) {
      return __async(this, null, function* () {
        if (!identity || !password)
          return new MCAPIError(400, "[Account Login] - Both identity and password are required!");
        const payload = {
          username: identity,
          password,
          requestUser: true,
          agent: {
            name: "Minecraft",
            version: 1
          }
        };
        const body = yield Requests.POST("https://authserver.mojang.com/authenticate", { payload }).catch((err) => {
          if (!(err instanceof MCAPIError))
            return err;
          const errPrefix = "[Account Login] - ";
          const msg = err.code == 429 ? "You have reached the API request limit." : "Identity and/or password not recognized.";
          return new MCAPIError(err.code, `${errPrefix}${msg}`);
        });
        if (!body) {
          console.error(body);
          return null;
        }
        const account = new MojangAccount(body), accProfiles = account.profiles, profiles = this.loadAll ? accProfiles.list : [accProfiles.selected], len = profiles.length;
        for (let i = 0; i < len; i++) {
          const profile = profiles[i];
          if (profile instanceof MinecraftProfile) {
            if (!profile.player || profile.game == "minecraft")
              yield profile.loadPlayer();
          }
        }
        return account;
      });
    }
  }

  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  class MCAPI {
    /**
     * @readonly
     * The current package version
     */
    static get version() {
      var _a, _b;
      return (_b = (_a = globalThis.process) == null ? void 0 : _a.env) == null ? void 0 : _b.npm_package_version;
    }
  }
  __publicField(MCAPI, "accounts", MCAPI_ACCOUNTS);
  __publicField(MCAPI, "players", MCAPI_PLAYERS);
  __publicField(MCAPI, "servers", MCAPI_SERVERS);

  exports.MCAPI = MCAPI;
  exports.accounts = MCAPI_ACCOUNTS;
  exports.default = MCAPI;
  exports.players = MCAPI_PLAYERS;
  exports.servers = MCAPI_SERVERS;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
