"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setCookie = void 0;
var _encodeCookieValue = require("./_helpers/encodeCookieValue.helper");
var _encodeCookieName = require("./_helpers/encodeCookieName.helper");
/**
 * These are the properties that can be set in the `attributes` objects of the
 * cookie functions.
 *
 * @remarks
 * Using `maxAge` is preferred over `expires`. If both `expires` and `maxAge`
 * are set, `maxAge` has precedence.
 */

/**
 * Set a cookie with a name, value and optional attributes.
 */
const setCookie = (name, value, attributes) => {
  const options = {
    path: "",
    domain: "",
    maxAge: undefined,
    expires: undefined,
    httpOnly: false,
    secure: false,
    ...attributes
  }; // Changeable variables for name and value
  let cookieName = name;
  let cookieValue = value;

  // Set object with attributes
  const cookieAttributes = {
    Path: options.path,
    Domain: options.domain,
    HttpOnly: options.httpOnly,
    Secure: options.secure
  };
  if (typeof options.maxAge === "number") {
    cookieAttributes["Max-Age"] = options.maxAge.toString();
  } else if (options.expires) {
    if (typeof options.expires === "number") {
      // Convert number of days into milliseconds
      cookieAttributes.Expires = new Date(Date.now() + options.expires * 864e5).toUTCString();
    } else {
      cookieAttributes.Expires = options.expires.toUTCString();
    }
  }

  // Turn values supplied as arrays and objects into strings
  try {
    const result = JSON.stringify(cookieValue);
    if (/^[{[]/.test(result)) {
      cookieValue = result;
    }
  } catch (error) {
    // Could not stringify, probably because the value was already a string
  }

  // Encode name and value
  cookieName = (0, _encodeCookieName.encodeCookieName)(cookieName);
  cookieValue = (0, _encodeCookieValue.encodeCookieValue)(cookieValue);

  // Convert attributes to a string
  let attributesString = "";
  for (const attributeName in cookieAttributes) {
    if (Object.prototype.hasOwnProperty.call(cookieAttributes, attributeName) && cookieAttributes[attributeName]) {
      // Set name
      attributesString += `; ${attributeName}`;

      // If value is a boolean, don't set a value
      if (cookieAttributes[attributeName] === true) {
        continue;
      }

      // Set value
      attributesString += `=${String(cookieAttributes[attributeName]).split(";")[0]}`;
    }
  }

  // Set cookie
  document.cookie = `${cookieName}=${cookieValue}${attributesString}`;
};
exports.setCookie = setCookie;
//# sourceMappingURL=setCookie.js.map