"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Interval = void 0;
var _timer = require("./timer");
/**
 * An alternative to `setInterval` that can be paused, resumed and reset.
 *
 * @example
 * **Basic usage:**
 * ```ts
 * import { Interval } from "@baggie/core";
 *
 * // Create an interval timer that executes a function after 2 seconds
 * const interval = new Interval((a, b) => {
 *     window.console.log(`${a}, ${b}`);
 * }, 2000, "Hello", "friend");
 *
 * // Start interval timer
 * interval.start();
 *
 * // Pause interval timer after 1 second
 * setTimeout(() => {
 *     interval.pause();
 *
 *     // And resume it after 3 seconds
 *     setTimeout(() => {
 *         interval.start();
 *     }, 3000);
 * }, 1000);
 *
 * // After 5 seconds the function will output "Hello, friend" to the console.
 * ```
 */
class Interval extends _timer.Timer {
  constructor(callback) {
    let timeoutMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    for (var _len = arguments.length, parameters = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      parameters[_key - 2] = arguments[_key];
    }
    super(callback, timeoutMs, ...parameters);
  }
  done() {
    this.reset();
    this.start();
    this.callback();
  }
}
exports.Interval = Interval;
//# sourceMappingURL=interval.js.map