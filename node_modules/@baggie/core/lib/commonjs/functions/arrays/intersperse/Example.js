"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _blocks = require("@storybook/blocks");
var _react2 = require("@baggie/react");
var _intersperse = require("./intersperse");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [array, setArray] = (0, _react.useState)(props.array);
  const [insertion, setInsertion] = (0, _react.useState)(props.insertion);
  const {
    splitArray,
    splitInsertion,
    output
  } = (0, _react.useMemo)(() => {
    const splitArray = array.split(/\s*,\s*/).filter(part => part !== "");
    const splitInsertion = insertion.split(/\s*,\s*/).filter(part => part !== "");
    const output = (0, _intersperse.intersperse)(splitArray, ...splitInsertion);
    return {
      splitArray,
      splitInsertion,
      output
    };
  }, [array, insertion]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Array",
    labelForId: "array-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "array-input",
    value: array,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setArray(target.value);
    },
    spellCheck: false
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Insertion",
    labelForId: "insertion-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "insertion-input",
    value: insertion,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setInsertion(target.value);
    },
    spellCheck: false
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Output",
    labelForId: undefined
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, /*#__PURE__*/_react.default.createElement("code", null, JSON.stringify(output))))), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { intersperse } from "@baggie/core";

const array = ${JSON.stringify(splitArray)};
const insertion = ${JSON.stringify(splitInsertion.length === 1 ? splitInsertion[0] : splitInsertion)};

const output = intersperse(array, ${splitInsertion.length === 1 ? "" : "..."}insertion);
/*
output = ${JSON.stringify(output, null, 4)}
*/
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map