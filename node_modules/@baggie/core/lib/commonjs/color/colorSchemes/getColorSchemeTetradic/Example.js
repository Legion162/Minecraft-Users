"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _blocks = require("@storybook/blocks");
var _ColorViewer = require("../../_components/ColorViewer/ColorViewer");
var _ColorInput = require("../../_components/ColorInput/ColorInput");
var _getColorSchemeTetradic = require("./getColorSchemeTetradic");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [color, setColor] = (0, _react.useState)(props.color);
  const scheme = (0, _react.useMemo)(() => {
    try {
      return (0, _getColorSchemeTetradic.getColorSchemeTetradic)(color);
    } catch (err) {
      return [];
    }
  }, [color]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ColorInput.ColorInput, {
    label: "Color",
    value: color,
    onChange: setColor
  }), /*#__PURE__*/_react.default.createElement("div", {
    key: color,
    style: {
      marginTop: "25px",
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }
  }, scheme.map(c => /*#__PURE__*/_react.default.createElement(_ColorViewer.ColorViewer, {
    key: c,
    color: c
  }))), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { getColorSchemeTetradic } from "@baggie/core";

const color = "${color}";

const scheme = getColorSchemeTetradic(color);
/*
scheme = ${JSON.stringify(scheme, null, 4)}
*/
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map