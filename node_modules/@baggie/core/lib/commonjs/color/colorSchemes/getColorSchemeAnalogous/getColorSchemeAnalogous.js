"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getColorSchemeAnalogous = void 0;
var _convertHslToRgb = require("../../convert/convertHslToRgb/convertHslToRgb");
var _convertRgbToHsl = require("../../convert/convertRgbToHsl/convertRgbToHsl");
var _convertStringToRgb = require("../../convert/convertStringToRgb/convertStringToRgb");
var _convertRgbToHex = require("../../convert/convertRgbToHex/convertRgbToHex");
/**
 * Get an analogous color scheme.
 */
const getColorSchemeAnalogous = function (color) {
  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
  let steps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;
  const hex = typeof color === "string" ? color : (0, _convertRgbToHex.convertRgbToHex)(color);
  const rgb = typeof color === "string" ? (0, _convertStringToRgb.convertStringToRgb)(color) : color;
  const {
    hue,
    saturation,
    lightness,
    alpha
  } = (0, _convertRgbToHsl.convertRgbToHsl)(rgb);
  const colors = [hex];
  const step = 360 / steps;
  for (let i = 1; i <= count - 1; i += 1) {
    colors[colors.length] = (0, _convertRgbToHex.convertRgbToHex)((0, _convertHslToRgb.convertHslToRgb)({
      hue: (hue + step * i) % 360,
      saturation,
      lightness,
      alpha
    }));
  }
  return colors;
};
exports.getColorSchemeAnalogous = getColorSchemeAnalogous;
//# sourceMappingURL=getColorSchemeAnalogous.js.map