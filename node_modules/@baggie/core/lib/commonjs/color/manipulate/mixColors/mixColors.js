"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mixColors = void 0;
var _convertStringToRgb = require("../../convert/convertStringToRgb/convertStringToRgb");
var _convertRgbToHex = require("../../convert/convertRgbToHex/convertRgbToHex");
/**
 * Mix two colors together.
 */
const mixColors = function (colorA, colorB) {
  let weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
  try {
    const rgb1 = typeof colorA === "string" ? (0, _convertStringToRgb.convertStringToRgb)(colorA) : colorA;
    const rgb2 = typeof colorB === "string" ? (0, _convertStringToRgb.convertStringToRgb)(colorB) : colorB;
    const red1 = rgb1.red / 255;
    const red2 = rgb2.red / 255;
    const green1 = rgb1.green / 255;
    const green2 = rgb2.green / 255;
    const blue1 = rgb1.blue / 255;
    const blue2 = rgb2.blue / 255;
    const alpha1 = typeof rgb1.alpha === "number" ? rgb1.alpha : 1;
    const alpha2 = typeof rgb2.alpha === "number" ? rgb2.alpha : 1;
    return (0, _convertRgbToHex.convertRgbToHex)({
      red: Math.round((red2 + (red1 - red2) * weight) * 255),
      green: Math.round((green2 + (green1 - green2) * weight) * 255),
      blue: Math.round((blue2 + (blue1 - blue2) * weight) * 255),
      alpha: Math.round((alpha2 + (alpha1 - alpha2) * weight) * 1000) / 1000
    });
  } catch (err) {
    return undefined;
  }
};
exports.mixColors = mixColors;
//# sourceMappingURL=mixColors.js.map