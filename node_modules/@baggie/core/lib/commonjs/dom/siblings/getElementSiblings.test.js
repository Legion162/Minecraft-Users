"use strict";

var _getElementSiblings = require("./getElementSiblings");
describe("getElementSiblings", () => {
  test("Previous siblings", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div>`;
    const element3 = document.getElementById("element-3");
    expect((0, _getElementSiblings.getElementSiblings)(element3, {
      untilElement: element3
    }).length).toBe(2);
  });
  test("Previous siblings including original", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div>`;
    const element3 = document.getElementById("element-3");
    expect((0, _getElementSiblings.getElementSiblings)(element3, {
      untilElement: element3,
      includeOriginalElement: true
    }).length).toBe(3);
  });
  test("Next siblings", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div>`;
    const element2 = document.getElementById("element-2");
    expect((0, _getElementSiblings.getElementSiblings)(element2, {
      fromElement: element2
    }).length).toBe(2);
  });
  test("Next siblings using boolean", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div>`;
    const element2 = document.getElementById("element-2");
    expect((0, _getElementSiblings.getElementSiblings)(element2, {
      fromElement: true
    }).length).toBe(2);
  });
  test("Next siblings including original", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div>`;
    const element2 = document.getElementById("element-2");
    expect((0, _getElementSiblings.getElementSiblings)(element2, {
      fromElement: element2,
      includeOriginalElement: true
    }).length).toBe(3);
  });
  test("No siblings", () => {
    document.body.innerHTML = `<div id="element-1"><div id="element-2"></div></div><div id="element-3"></div>`;
    const element2 = document.getElementById("element-2");
    expect((0, _getElementSiblings.getElementSiblings)(element2)).toEqual([]);
  });
  test("No previous siblings", () => {
    document.body.innerHTML = `<div id="element-1"><div id="element-2"></div></div><div id="element-3"></div>`;
    const element1 = document.getElementById("element-1");
    expect((0, _getElementSiblings.getElementSiblings)(element1, {
      untilElement: element1
    })).toEqual([]);
  });
  test("No following siblings", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"><div id="element-3"></div></div>`;
    const element2 = document.getElementById("element-2");
    expect((0, _getElementSiblings.getElementSiblings)(element2, {
      fromElement: element2
    })).toEqual([]);
  });
  test("Only original", () => {
    document.body.innerHTML = `<div id="element-1"><div id="element-2"></div></div><div id="element-3"></div>`;
    const element2 = document.getElementById("element-2");
    expect((0, _getElementSiblings.getElementSiblings)(element2, {
      includeOriginalElement: true
    }).length).toBe(1);
  });
  test("Only specific range not including origin", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div><div id="element-5"></div>`;
    const element1 = document.getElementById("element-1");
    const element2 = document.getElementById("element-2");
    const element4 = document.getElementById("element-4");
    expect((0, _getElementSiblings.getElementSiblings)(element1, {
      fromElement: element2,
      untilElement: element4
    }).length).toBe(3);
  });
  test("Only specific range including origin", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div><div id="element-5"></div>`;
    const element2 = document.getElementById("element-2");
    const element3 = document.getElementById("element-3");
    const element4 = document.getElementById("element-4");
    expect((0, _getElementSiblings.getElementSiblings)(element3, {
      fromElement: element2,
      untilElement: element4
    }).length).toBe(2);
  });
  test("Until element using boolean", () => {
    document.body.innerHTML = `<div id="element-1"></div><div id="element-2"></div><div id="element-3"></div><div id="element-4"></div><div id="element-5"></div>`;
    const element1 = document.getElementById("element-1");
    const element3 = document.getElementById("element-3");
    expect((0, _getElementSiblings.getElementSiblings)(element3, {
      fromElement: element1,
      untilElement: true
    }).length).toBe(2);
  });
  test("Match selector", () => {
    document.body.innerHTML = `<div class="a"></div><div class="a"></div><div class="b"></div><div id="target"></div><div class="a"></div>`;
    const target = document.getElementById("target");
    expect((0, _getElementSiblings.getElementSiblings)(target, {
      matchSelector: ".a",
      includeOriginalElement: true
    }).length).toBe(3);
  });
  test("Match selector including origin", () => {
    document.body.innerHTML = `<div class="a"></div><div class="a"></div><div class="b"></div><div class="a" id="target"></div><div class="a"></div>`;
    const target = document.getElementById("target");
    expect((0, _getElementSiblings.getElementSiblings)(target, {
      matchSelector: ".a",
      includeOriginalElement: true
    }).length).toBe(4);
  });
});
//# sourceMappingURL=getElementSiblings.test.js.map