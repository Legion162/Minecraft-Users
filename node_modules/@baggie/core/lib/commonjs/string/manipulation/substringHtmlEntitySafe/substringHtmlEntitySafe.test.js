"use strict";

var _substringHtmlEntitySafe = require("./substringHtmlEntitySafe");
describe("substringHtmlEntitySafe", () => {
  test("Use on basic string", () => {
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem ipsum dolor sit amet", 1, 20)).toBe("orem ipsum dolor si");
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem ipsum dolor sit amet", 0, 10)).toBe("lorem ipsu");
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem ipsum dolor sit amet", 0)).toBe("lorem ipsum dolor sit amet");
  });
  test("Use on string with HTML entities", () => {
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem &nbsp; ipsum &#100;dolor sit&sup2;amet", 0, 20)).toBe("lorem &nbsp; ipsum &#100;dolor");
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem &nbsp; ipsum &#100;dolor sit&sup2;amet", 6)).toBe("&nbsp; ipsum &#100;dolor sit&sup2;amet");
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem &nbsp; ipsum &#100;dolor sit&sup2;amet", 8)).toBe("ipsum &#100;dolor sit&sup2;amet");
  });
  test("Negative end index", () => {
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem &nbsp; ipsum &#100;dolor sit&sup2;amet", 0, -2)).toBe("lorem &nbsp; ipsum &#100;dolor sit&sup2;am");
    expect((0, _substringHtmlEntitySafe.substringHtmlEntitySafe)("lorem &nbsp; ipsum &#100;dolor sit&sup2;amet", 7, -20)).toBe(" i");
  });
});
//# sourceMappingURL=substringHtmlEntitySafe.test.js.map