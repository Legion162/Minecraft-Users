"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.passwordSpecialCharactersDefault = exports.getPasswordRegex = void 0;
/**
 * A string with the default accepted special character used by
 * `getPasswordRegex`.
 */
const passwordSpecialCharactersDefault = "!#$€%&§'()*+,./:;<=>?@[]\\^_`´{|}~¨-";

/**
 * Returns a regular expression to validate passwords with.
 *
 * Define your requirements for a valid password by setting the following parameters.
 * - minLength - defaults to `8`
 * - maxLength
 * - minDigits - defaults to `1`
 * - minLowercase - defaults to `1`
 * - minUppercase - defaults to `1`
 * - minSpecial - defaults to `1`
 * - specialCharacters - defaults to {@link passwordSpecialCharactersDefault}
 * - forbiddenCharacters
 * - allowUnicode - defaults to `false`
 */
exports.passwordSpecialCharactersDefault = passwordSpecialCharactersDefault;
const getPasswordRegex = options => {
  const passwordSettings = {
    ...options,
    minLength: Math.max(0, typeof (options === null || options === void 0 ? void 0 : options.minLength) === "number" ? options.minLength : Math.min(8, (options === null || options === void 0 ? void 0 : options.maxLength) || Infinity)),
    minDigits: Math.max(0, typeof (options === null || options === void 0 ? void 0 : options.minDigits) === "number" ? options.minDigits : 1, 0),
    minLowercase: Math.max(0, typeof (options === null || options === void 0 ? void 0 : options.minLowercase) === "number" ? options.minLowercase : 1, 0),
    minUppercase: Math.max(0, typeof (options === null || options === void 0 ? void 0 : options.minUppercase) === "number" ? options.minUppercase : 1, 0),
    minSpecial: Math.max(0, typeof (options === null || options === void 0 ? void 0 : options.minSpecial) === "number" ? options.minSpecial : 1, 0),
    specialCharacters: (options === null || options === void 0 ? void 0 : options.specialCharacters) || passwordSpecialCharactersDefault,
    forbiddenCharacters: typeof (options === null || options === void 0 ? void 0 : options.forbiddenCharacters) === "string" ? options.forbiddenCharacters : "",
    allowUnicode: (options === null || options === void 0 ? void 0 : options.allowUnicode) || false
  };
  const hasMaxLength = typeof passwordSettings.maxLength === "number";
  const lowercaseLetters = passwordSettings.allowUnicode ? "\\p{Ll}" : "[a-z]";
  const uppercaseLetters = passwordSettings.allowUnicode ? "\\p{Lu}" : "[A-Z]";
  const specialChars = passwordSettings.specialCharacters ? passwordSettings.specialCharacters.replace(/[\^\-\]\\]/g, "\\$&") : "";
  return new RegExp(`^${passwordSettings.forbiddenCharacters ? `(?!(?:.*[${passwordSettings.forbiddenCharacters}].*){1,})` : ""}(?=(.*${lowercaseLetters}.*){${passwordSettings.minLowercase},})(?=(.*${uppercaseLetters}.*){${passwordSettings.minUppercase},})(?=(.*\\d.*){${passwordSettings.minDigits},})(?=(.*[${specialChars}].*){${passwordSettings.minSpecial},}).{${passwordSettings.minLength},${hasMaxLength ? Math.max(passwordSettings.minLength, passwordSettings.maxLength) : ""}}$`, passwordSettings.allowUnicode ? "u" : "");
};
exports.getPasswordRegex = getPasswordRegex;
//# sourceMappingURL=getPasswordRegex.js.map