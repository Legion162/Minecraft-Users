"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _blocks = require("@storybook/blocks");
var _react2 = require("@baggie/react");
var _getNewlineRegex = require("./getNewlineRegex");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [string, setString] = (0, _react.useState)(props.string);
  const [includeWhitespace, setIncludeWhitespace] = (0, _react.useState)(false);
  const newString = (0, _react.useMemo)(() => string.replace((0, _getNewlineRegex.getNewlineRegex)(includeWhitespace), "-"), [string, includeWhitespace]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "String",
    labelForId: "string-input"
  }, /*#__PURE__*/_react.default.createElement("textarea", {
    id: "string-input",
    value: string,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setString(target.value);
    },
    style: {
      width: "100%",
      maxWidth: "360px"
    },
    spellCheck: false,
    rows: 3
  })), /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    checked: includeWhitespace,
    onChange: () => setIncludeWhitespace(x => !x)
  }), " ", "Include whitespace"), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { getNewlineRegex } from "@baggie/core";

const string = \`${string}\`;

const newString = string.replace(getNewlineRegex(${includeWhitespace ? "true" : ""}), "-");
// newString = \`${newString}\`
`
  }), /*#__PURE__*/_react.default.createElement("b", null, "The returned regex:"), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `new RegExp("${(0, _getNewlineRegex.getNewlineRegex)(includeWhitespace).source}", "${(0, _getNewlineRegex.getNewlineRegex)(includeWhitespace).flags}")`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map