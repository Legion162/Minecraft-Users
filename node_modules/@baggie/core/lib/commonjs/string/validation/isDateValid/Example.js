"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _blocks = require("@storybook/blocks");
var _react2 = require("@baggie/react");
var _isDateValid = require("./isDateValid");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [date, setDate] = (0, _react.useState)(props.date);
  const [zeroBasedMonth, setZeroBasedMonth] = (0, _react.useState)(props.zeroBasedMonth || false);
  const [monthBeforeDay, setMonthBeforeDay] = (0, _react.useState)(props.monthBeforeDay || false);
  const isValid = (0, _react.useMemo)(() => (0, _isDateValid.isDateValid)(date, {
    zeroBasedMonth,
    monthBeforeDay
  }), [date, zeroBasedMonth, monthBeforeDay]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      gap: "10px"
    }
  }, typeof date === "string" ? /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Date",
    labelForId: "date"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "date-input",
    value: date,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setDate(target.value);
    },
    spellCheck: false
  })) : /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Day",
    labelForId: "day"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "day-input",
    type: "number",
    value: date.day,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setDate(current => ({
        ...current,
        day: target.valueAsNumber
      }));
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Month",
    labelForId: "month"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "month-input",
    type: "number",
    value: date.month,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setDate(current => ({
        ...current,
        month: target.valueAsNumber
      }));
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Year",
    labelForId: "year"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "year-input",
    type: "number",
    value: date.year,
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setDate(current => ({
        ...current,
        year: target.valueAsNumber
      }));
    }
  }))), /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    checked: zeroBasedMonth,
    onChange: () => setZeroBasedMonth(current => !current)
  }), " ", "Zero based month"), typeof date === "string" && /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    checked: monthBeforeDay,
    onChange: () => setMonthBeforeDay(current => !current)
  }), " ", "Month before date")), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { isDateValid } from "@baggie/core";

const date = ${typeof date === "string" ? `"${date}"` : JSON.stringify(date, null, 4)};
${monthBeforeDay || zeroBasedMonth ? `const options = {
${monthBeforeDay ? "    monthBeforeDay: true,\n" : ""}${zeroBasedMonth ? "    zeroBasedMonth: true,\n" : ""}};\n` : ""}
const isValid = isDateValid(date${monthBeforeDay || zeroBasedMonth ? ", options" : ""});
// isValid = ${isValid ? "true" : "false"}
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map