"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _blocks = require("@storybook/blocks");
var _react2 = require("@baggie/react");
var _getPasswordRegex = require("../../regex/getPasswordRegex/getPasswordRegex");
var _isPasswordValid = require("./isPasswordValid");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [password, setPassword] = (0, _react.useState)(props.password || "");
  const [minLength, setMinLength] = (0, _react.useState)();
  const [maxLength, setMaxLength] = (0, _react.useState)();
  const [minDigits, setMinDigits] = (0, _react.useState)();
  const [minLowercase, setMinLowercase] = (0, _react.useState)();
  const [minUppercase, setMinUppercase] = (0, _react.useState)();
  const [minSpecial, setMinSpecial] = (0, _react.useState)();
  const [specialCharacters, setSpecialCharacters] = (0, _react.useState)();
  const [forbiddenCharacters, setForbiddenCharacters] = (0, _react.useState)();
  const [allowUnicode, setAllowUnicode] = (0, _react.useState)(false);
  const {
    options,
    isValid
  } = (0, _react.useMemo)(() => {
    const optionsObj = {
      minLength,
      maxLength,
      minDigits,
      minLowercase,
      minUppercase,
      minSpecial,
      specialCharacters,
      forbiddenCharacters,
      allowUnicode
    };
    return {
      options: Object.fromEntries(Object.entries(optionsObj).filter(entry => typeof entry[1] !== "undefined" && entry[1] !== false)),
      isValid: (0, _isPasswordValid.isPasswordValid)(password, optionsObj)
    };
  }, [password, minLength, maxLength, minDigits, minLowercase, minUppercase, minSpecial, specialCharacters, forbiddenCharacters, allowUnicode]);
  const hasOptionSet = Object.keys(options).length;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Password",
    labelForId: "password-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "password-input",
    value: password,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setPassword(target.value);
    },
    spellCheck: false
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Is valid",
    labelForId: undefined
  }, isValid ? "true" : "false")), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      marginTop: "10px",
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Min length",
    labelForId: "minLength"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "minLength",
    type: "number",
    value: isNaN(minLength) ? "" : minLength,
    placeholder: Math.min(8, typeof maxLength === "undefined" ? 8 : maxLength).toString(),
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setMinLength(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Max length",
    labelForId: "maxLength"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "maxLength",
    type: "number",
    value: isNaN(maxLength) ? "" : maxLength,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setMaxLength(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Min digits",
    labelForId: "minDigits"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "minDigits",
    type: "number",
    value: isNaN(minDigits) ? "" : minDigits,
    placeholder: "1",
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setMinDigits(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Min lowercase",
    labelForId: "minLowercase"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "minLowercase",
    type: "number",
    value: isNaN(minLowercase) ? "" : minLowercase,
    placeholder: "1",
    onChange: _ref5 => {
      let {
        target
      } = _ref5;
      return setMinLowercase(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Min uppercase",
    labelForId: "minUppercase"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "minUppercase",
    type: "number",
    value: isNaN(minUppercase) ? "" : minUppercase,
    placeholder: "1",
    onChange: _ref6 => {
      let {
        target
      } = _ref6;
      return setMinUppercase(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Min special",
    labelForId: "minSpecial"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "minSpecial",
    type: "number",
    value: isNaN(minSpecial) ? "" : minSpecial,
    placeholder: "1",
    onChange: _ref7 => {
      let {
        target
      } = _ref7;
      return setMinSpecial(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Special characters",
    labelForId: "specialCharacters"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "specialCharacters",
    value: specialCharacters || "",
    placeholder: _getPasswordRegex.passwordSpecialCharactersDefault,
    onChange: _ref8 => {
      let {
        target
      } = _ref8;
      return setSpecialCharacters(target.value || undefined);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Forbidden characters",
    labelForId: "forbiddenCharacters"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "forbiddenCharacters",
    value: forbiddenCharacters || "",
    onChange: _ref9 => {
      let {
        target
      } = _ref9;
      return setForbiddenCharacters(target.value || undefined);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Allow unicode",
    labelForId: "allowUnicode"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "allowUnicode",
    type: "checkbox",
    checked: allowUnicode,
    onChange: () => setAllowUnicode(current => !current)
  }))), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { isPasswordValid } from "@baggie/core";

const password = \`${password.replace(/`/g, "\\`")}\`;
${hasOptionSet ? `const options = ${JSON.stringify(options, null, 4)};\n` : ""}
const isValid = isPasswordValid(password${hasOptionSet ? ", options" : ""});
// isValid = ${isValid ? "true" : "false"}
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map