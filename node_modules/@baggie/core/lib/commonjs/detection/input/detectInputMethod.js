"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DetectInputMethod = void 0;
/**
 * @category Input - Detect Input Method
 */

/**
 * Detect if the user is using **touch** or a **mouse** as an input device.
 */
class DetectInputMethod {
  constructor(options) {
    this.mouseMoveCount = 0;
    this.settings = {
      touchClass: "touch-input",
      mouseClass: "mouse-input",
      mouseMoveThreshold: 5,
      continuousDetection: false,
      setClassOnElement: document.documentElement,
      ...options
    };
    document.addEventListener("touchstart", this.touchFired);
    document.addEventListener("mousemove", this.mouseMoved);
  }
  touchFired = () => {
    this.mouseMoveCount = 0;
    if (!this.settings.continuousDetection) {
      this.unbind();
    }
    const element = this.settings.setClassOnElement;
    if (element) {
      element.classList.remove(this.settings.mouseClass || "");
      element.classList.add(this.settings.touchClass || "");
    }
    if (this.settings.callback) {
      this.settings.callback({
        isMouse: false,
        isTouch: true
      });
    }
  };
  mouseMoved = () => {
    this.mouseMoveCount += 1;
    if (this.mouseMoveCount >= (this.settings.mouseMoveThreshold || 5)) {
      if (!this.settings.continuousDetection) {
        this.unbind();
      }
      const element = this.settings.setClassOnElement;
      if (element) {
        element.classList.remove(this.settings.touchClass || "");
        element.classList.add(this.settings.mouseClass || "");
      }
      if (this.settings.callback) {
        this.settings.callback({
          isMouse: true,
          isTouch: false
        });
      }
    }
  };
  unbind = () => {
    document.removeEventListener("touchstart", this.touchFired);
    document.removeEventListener("mousemove", this.mouseMoved);
  };
}
exports.DetectInputMethod = DetectInputMethod;
//# sourceMappingURL=detectInputMethod.js.map