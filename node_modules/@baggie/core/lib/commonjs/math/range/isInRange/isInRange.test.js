"use strict";

var _isInRange = require("./isInRange");
describe("isInRange", () => {
  test("Use with numbers in range", () => {
    expect((0, _isInRange.isInRange)(0, [0, 1])).toBe(true);
    expect((0, _isInRange.isInRange)(1, [0, 1])).toBe(true);
    expect((0, _isInRange.isInRange)(5, [0, 10])).toBe(true);
  });
  test("Use with numbers not in range", () => {
    expect((0, _isInRange.isInRange)(-1, [0, 1])).toBe(false);
    expect((0, _isInRange.isInRange)(2, [0, 1])).toBe(false);
    expect((0, _isInRange.isInRange)(Infinity, [0, 10])).toBe(false);
  });
  test("Use with multiple ranges", () => {
    expect((0, _isInRange.isInRange)(0, [[0, 1], [10, 20]])).toBe(true);
    expect((0, _isInRange.isInRange)(1, [[0, 1], [0, 10]])).toBe(true);
    expect((0, _isInRange.isInRange)(5, [[0, 10], [100, 200], [-100, 100]])).toBe(true);
    expect((0, _isInRange.isInRange)(-500, [[0, 10], [100, 200], [-100, 100]])).toBe(false);
    expect((0, _isInRange.isInRange)(500, [[0, 10], [100, 200], [-100, 100]])).toBe(false);
  });
});
//# sourceMappingURL=isInRange.test.js.map