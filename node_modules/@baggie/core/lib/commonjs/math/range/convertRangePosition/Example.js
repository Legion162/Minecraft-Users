"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _blocks = require("@storybook/blocks");
var _react2 = require("@baggie/react");
var _convertRangePosition = require("./convertRangePosition");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [position, setPosition] = (0, _react.useState)(props.position);
  const [fromFrom, setFromFrom] = (0, _react.useState)(props.fromFrom);
  const [fromTo, setFromTo] = (0, _react.useState)(props.fromTo);
  const [toFrom, setToFrom] = (0, _react.useState)(props.toFrom);
  const [toTo, setToTo] = (0, _react.useState)(props.toTo);
  const result = (0, _react.useMemo)(() => (0, _convertRangePosition.convertRangePosition)(position, {
    from: fromFrom,
    to: fromTo
  }, {
    from: toFrom,
    to: toTo
  }), [position, fromFrom, fromTo, toFrom, toTo]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Position",
    labelForId: "position-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "position-input",
    type: "number",
    value: position,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setPosition(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/_react.default.createElement("fieldset", null, /*#__PURE__*/_react.default.createElement("legend", null, "From range"), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "From",
    labelForId: "from-from-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "from-from-input",
    type: "number",
    value: fromFrom,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setFromFrom(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "To",
    labelForId: "from-to-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "from-to-input",
    type: "number",
    value: fromTo,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setFromTo(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  }))), /*#__PURE__*/_react.default.createElement("fieldset", null, /*#__PURE__*/_react.default.createElement("legend", null, "To range"), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "From",
    labelForId: "to-from-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "to-from-input",
    type: "number",
    value: toFrom,
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setToFrom(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "To",
    labelForId: "to-to-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "to-to-input",
    type: "number",
    value: toTo,
    onChange: _ref5 => {
      let {
        target
      } = _ref5;
      return setToTo(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  }))), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Result",
    labelForId: undefined
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, result))), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { convertRangePosition } from "@baggie/core";

const fromRange = { from: ${fromFrom}, to: ${fromTo} };
const toRange = { from: ${toFrom}, to: ${toTo} };

const newPosition = convertRangePosition(${position}, fromRange, toRange);
// newPosition = ${result}
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map