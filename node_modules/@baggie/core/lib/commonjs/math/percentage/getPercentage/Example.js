"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _blocks = require("@storybook/blocks");
var _react2 = require("@baggie/react");
var _getPercentage = require("./getPercentage");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [part, setPart] = (0, _react.useState)(props.part);
  const [percentage, setPercentage] = (0, _react.useState)(props.percentage);
  const [whole, setWhole] = (0, _react.useState)(props.whole);
  const [percentageAsDecimal, setPercentageAsDecimal] = (0, _react.useState)(true);
  const [varsString, resultString, result] = (0, _react.useMemo)(() => {
    const showPart = typeof part === "number";
    const showPercentage = typeof percentage === "number";
    const showWhole = typeof whole === "number";
    const partVar = showPart && `const part = ${part};`;
    const percentageVar = showPercentage && `const percentage = ${percentage};`;
    const wholeVar = showWhole && `const whole = ${whole};`;
    const result = (0, _getPercentage.getPercentage)(
    // @ts-ignore
    {
      part: part,
      percentage: percentage,
      whole: whole
    }, percentageAsDecimal);
    const realPercentage = (showPercentage ? percentage : result) * (percentageAsDecimal ? 100 : 1);
    const percentageAsDecimalString = percentageAsDecimal ? "" : ", false";
    const partResult = !showPart && `
const part = getPercentage({ percentage, whole }${percentageAsDecimalString});
// part = ${result}

// ${realPercentage}% of ${whole} is ${result}`;
    const percentageResult = !showPercentage && `
const percentage = getPercentage({ part, whole }${percentageAsDecimalString});
// percentage = ${result}

// ${part} of ${whole} is ${realPercentage}%`;
    const wholeResult = !showWhole && `
const whole = getPercentage({ percentage, part }${percentageAsDecimalString});
// whole = ${result}

// ${part} is ${realPercentage}% of ${result}`;
    return [[partVar, percentageVar, wholeVar].filter(item => item).join("\n"), [partResult, percentageResult, wholeResult].filter(item => item).join("\n"), result];
  }, [part, percentage, whole, percentageAsDecimal]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, typeof part === "number" && /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Part",
    labelForId: "part-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "part-input",
    type: "number",
    value: part,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setPart(target.valueAsNumber || 0);
    }
  })), typeof percentage === "number" && /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Percentage",
    labelForId: "percentage-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "percentage-input",
    type: "number",
    step: 0.01,
    value: percentage,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setPercentage(target.valueAsNumber || 0);
    }
  })), typeof whole === "number" && /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Whole",
    labelForId: "whole-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "whole-input",
    type: "number",
    value: whole,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setWhole(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: typeof part !== "number" ? "Part" : typeof percentage !== "number" ? "Percentage" : typeof whole !== "number" ? "Whole" : "",
    labelForId: undefined
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, result))), /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    checked: percentageAsDecimal,
    onChange: () => setPercentageAsDecimal(current => !current)
  }), " ", "Percentage as decimal"), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { getPercentage } from "@baggie/core";

${varsString}
${resultString}
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map