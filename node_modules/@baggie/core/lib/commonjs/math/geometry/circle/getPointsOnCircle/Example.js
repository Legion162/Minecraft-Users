"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@baggie/react");
var _blocks = require("@storybook/blocks");
var _getPointsOnCircle = require("./getPointsOnCircle");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [radius, setRadius] = (0, _react.useState)(props.radius);
  const [numberOfPoints, setNumberOfPoints] = (0, _react.useState)(props.numberOfPoints);
  const [offset, setOffset] = (0, _react.useState)(props.offset);
  const points = (0, _react.useMemo)(() => (0, _getPointsOnCircle.getPointsOnCircle)({
    radius: radius || 1,
    numberOfPoints: Math.min(numberOfPoints || 0, 30),
    offset: offset || 0
  }), [radius, numberOfPoints, offset]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Radius",
    labelForId: "radius-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "radius-input",
    type: "number",
    value: radius,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setRadius(target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Number of points",
    labelForId: "points-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "points-input",
    type: "number",
    max: 30,
    value: numberOfPoints,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setNumberOfPoints(target.valueAsNumber);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Offset",
    labelForId: "offset-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "offset-input",
    type: "number",
    value: offset,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setOffset(target.valueAsNumber);
    }
  }))), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      aspectRatio: 1,
      background: "#FC0",
      marginTop: "20px",
      borderRadius: "50%",
      position: "relative",
      display: "inline-grid",
      gridTemplateColumns: "1fr 1fr",
      alignItems: "center",
      pointerEvents: "none",
      userSelect: "none"
    }
  }, points.map((point, index) => /*#__PURE__*/_react.default.createElement("div", {
    key: index,
    style: {
      position: "absolute",
      top: "0%",
      left: "0%",
      width: "100%",
      height: "100%",
      transform: `rotate(${point.degrees}deg) translateY(-50%)`,
      transition: "all 0.4s ease-out"
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      top: "calc(50% - 4px)",
      left: "calc(50% - 3px)",
      width: "6px",
      height: "2px",
      background: "#900"
    }
  }))), /*#__PURE__*/_react.default.createElement("div", null), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      top: "-0.75em",
      padding: "0 10px",
      position: "relative",
      borderBottom: "1px solid #900"
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      lineHeight: "1.5em"
    }
  }, "r = ", radius || 1))), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { getPointsOnCircle } from "@baggie/core";

const radius = ${radius || 1};
const numberOfPoints = ${Math.min(numberOfPoints || 0, 30)};
const offset = ${offset || 0};

const points = getPointsOnCircle({ radius, numberOfPoints, offset });
/*
points = ${JSON.stringify(points.slice(0, 5), null, 4).replace(/}$/m, numberOfPoints > 5 ? "},\n    ..." : "}")}
*/
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map