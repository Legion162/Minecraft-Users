"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Example = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@baggie/react");
var _blocks = require("@storybook/blocks");
var _ceilToMultipleOf = require("../../../rounding/ceilToMultipleOf/ceilToMultipleOf");
var _floorToMultipleOf = require("../../../rounding/floorToMultipleOf/floorToMultipleOf");
var _getPercentageBetween = require("../../../percentage/getPercentageBetween/getPercentageBetween");
var _getPositionBetween = require("../../../percentage/getPositionBetween/getPositionBetween");
var _getPercentage = require("../../../percentage/getPercentage/getPercentage");
var _getDistance = require("../../distance/getDistance");
var _getCoordinatesAngle = require("./getCoordinatesAngle");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Example = props => {
  const [fromX, setFromX] = (0, _react.useState)(props.from.x);
  const [fromY, setFromY] = (0, _react.useState)(props.from.y);
  const [toX, setToX] = (0, _react.useState)(props.to.x);
  const [toY, setToY] = (0, _react.useState)(props.to.y);
  const [offset, setOffset] = (0, _react.useState)(0);
  const [clockwise, setClockwise] = (0, _react.useState)(false);
  const angle = (0, _react.useMemo)(() => (0, _getCoordinatesAngle.getCoordinatesAngle)({
    x: fromX,
    y: fromY
  }, {
    x: toX,
    y: toY
  }, {
    offset,
    clockwise
  }), [fromX, fromY, toX, toY, offset, clockwise]);
  const csXMin = (0, _floorToMultipleOf.floorToMultipleOf)(Math.min(fromY, toY, fromX, toX) - 20, 20);
  const csXMax = (0, _ceilToMultipleOf.ceilToMultipleOf)(Math.max(fromY, toY, fromX, toX) + 20, 20);
  const csYMin = (0, _floorToMultipleOf.floorToMultipleOf)(Math.min(fromY, toY, fromX, toX) - 20, 20);
  const csYMax = (0, _ceilToMultipleOf.ceilToMultipleOf)(Math.max(fromY, toY, fromX, toX) + 20, 20);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/_react.default.createElement("fieldset", null, /*#__PURE__*/_react.default.createElement("legend", null, "From"), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "X",
    labelForId: "from-x-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "from-x-input",
    value: fromX,
    type: "number",
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setFromX(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Y",
    labelForId: "from-y-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "from-y-input",
    value: fromY,
    type: "number",
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setFromY(target.valueAsNumber || 0);
    }
  }))), /*#__PURE__*/_react.default.createElement("fieldset", null, /*#__PURE__*/_react.default.createElement("legend", null, "To"), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "X",
    labelForId: "to-x-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "to-x-input",
    value: toX,
    type: "number",
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setToX(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Y",
    labelForId: "to-y-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "to-y-input",
    value: toY,
    type: "number",
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setToY(target.valueAsNumber || 0);
    }
  }))), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Offset",
    labelForId: "offset-input"
  }, /*#__PURE__*/_react.default.createElement("input", {
    id: "offset-input",
    value: offset,
    type: "number",
    onChange: _ref5 => {
      let {
        target
      } = _ref5;
      return setOffset(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/_react.default.createElement(_react2.InputWrapper, {
    label: "Angle",
    labelForId: undefined
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, angle))), /*#__PURE__*/_react.default.createElement("label", null, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    checked: clockwise,
    onChange: () => setClockwise(current => !current)
  }), " ", "Clockwise"), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "grid",
      gridTemplateColumns: "min-content 1fr",
      gridTemplateRows: "1fr min-content",
      marginTop: "20px",
      pointerEvents: "none",
      userSelect: "none"
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      paddingRight: "5px",
      textAlign: "right",
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-between"
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      transform: "translateY(-0.5em)"
    }
  }, csYMax), /*#__PURE__*/_react.default.createElement("div", null, (0, _getPositionBetween.getPositionBetween)(csYMax, csYMin, 0.5)), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      transform: "translateY(0.5em)"
    }
  }, csYMin)), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      background: "#FC0",
      boxShadow: "0 0 0 1px #FC0",
      width: "200px",
      height: "200px",
      position: "relative",
      overflow: "hidden"
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      top: `${100 - (0, _getPercentageBetween.getPercentageBetween)(fromY, {
        from: csYMin,
        to: csYMax
      }) * 100}%`,
      left: `${(0, _getPercentageBetween.getPercentageBetween)(fromX, {
        from: csXMin,
        to: csXMax
      }) * 100}%`,
      width: `${(0, _getPercentage.getPercentage)({
        part: (0, _getDistance.getDistance)({
          x: fromX,
          y: fromY
        }, {
          x: toX,
          y: toY
        }),
        whole: (0, _getDistance.getDistance)({
          x: csXMin,
          y: csYMin
        }, {
          x: csXMax,
          y: csYMax
        })
      }) * 100 * Math.sqrt(2) * 2}%`,
      height: `${(0, _getPercentage.getPercentage)({
        part: (0, _getDistance.getDistance)({
          x: fromX,
          y: fromY
        }, {
          x: toX,
          y: toY
        }),
        whole: (0, _getDistance.getDistance)({
          x: csXMin,
          y: csYMin
        }, {
          x: csXMax,
          y: csYMax
        })
      }) * 100 * Math.sqrt(2) * 2}%`,
      transform: "translate(-50%, -50%)",
      backgroundImage: `conic-gradient(from ${clockwise ? offset + (270 - angle) : -90 - offset}deg, #fff ${angle}deg, #fff5 ${angle}deg)`,
      borderRadius: "50%"
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      left: "50%",
      height: "100%",
      borderRight: "1px dashed #fff"
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      top: "50%",
      width: "100%",
      borderTop: "1px dashed #fff"
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      top: `${100 - (0, _getPercentageBetween.getPercentageBetween)(fromY, {
        from: csYMin,
        to: csYMax
      }) * 100}%`,
      left: `${(0, _getPercentageBetween.getPercentageBetween)(fromX, {
        from: csXMin,
        to: csXMax
      }) * 100}%`,
      boxShadow: "0 0 0 5px #000"
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      top: `${100 - (0, _getPercentageBetween.getPercentageBetween)(toY, {
        from: csYMin,
        to: csYMax
      }) * 100}%`,
      left: `${(0, _getPercentageBetween.getPercentageBetween)(toX, {
        from: csXMin,
        to: csXMax
      }) * 100}%`,
      boxShadow: "0 0 0 5px #c00"
    }
  })), /*#__PURE__*/_react.default.createElement("div", null), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: "200px",
      paddingRight: "5px",
      display: "grid",
      gridTemplateColumns: "repeat(3, 1fr)"
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      transform: "translateX(-1000cw)"
    }
  }, csXMin), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      textAlign: "center"
    }
  }, (0, _getPositionBetween.getPositionBetween)(csXMax, csXMin, 0.5)), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      textAlign: "right"
    }
  }, csXMax))), /*#__PURE__*/_react.default.createElement(_blocks.Source, {
    dark: true,
    code: `
import { getCoordinatesAngle } from "@baggie/core";

const from = { x: ${fromX}, y: ${fromY} };
const to = { x: ${toX}, y: ${toY} };

const angle = getCoordinatesAngle(from, to);
// angle = ${angle}
`
  }));
};
exports.Example = Example;
//# sourceMappingURL=Example.js.map