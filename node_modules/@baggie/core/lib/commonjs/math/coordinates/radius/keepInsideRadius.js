"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keepInsideRadius = void 0;
var _isInsideRadius = require("./isInsideRadius");
/**
 * If a set of coordinates are outside a specified radius from the origin (0,0),
 * return the nearest set of coordinates inside the radius.
 *
 * @example
 * **Basic usage:**
 * ```ts
 * import { keepInsideRadius } from "@baggie/core";
 *
 * const position = { x: 20, y: 0 };
 *
 * const radiusA = 100;
 * const newPositionA = keepInsideRadius(position, radiusA);
 * // newPositionA = { x: 20, y: 0 }
 *
 * const radiusB = 10;
 * const newPositionB = keepInsideRadius(position, radiusB);
 * // newPositionB = { x: 10, y: 0 }
 * ```
 */
const keepInsideRadius = (position, radius) => {
  if ((0, _isInsideRadius.isInsideRadius)(position, radius)) {
    return position;
  }
  const radians = Math.atan2(position.y, position.x);
  return {
    x: Math.cos(radians) * radius,
    y: Math.sin(radians) * radius
  };
};
exports.keepInsideRadius = keepInsideRadius;
//# sourceMappingURL=keepInsideRadius.js.map