import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { stripTagsFromString } from "./stripTagsFromString";
export const Example = props => {
  const [string, setString] = useState(props.string);
  const [replaceWith, setReplaceWith] = useState(props.replaceWith || " ");
  const [trim, setTrim] = useState(true);
  const output = useMemo(() => stripTagsFromString(string, replaceWith, trim), [string, replaceWith, trim]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "String",
    labelForId: "string-input"
  }, /*#__PURE__*/React.createElement("textarea", {
    id: "string-input",
    value: string,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setString(target.value);
    },
    style: {
      width: "100%",
      maxWidth: "360px"
    },
    spellCheck: false,
    rows: 3
  })), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Replace with",
    labelForId: "replace-with-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "replace-with-input",
    value: replaceWith,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setReplaceWith(target.value);
    }
  })), /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: trim,
    onChange: () => setTrim(current => !current)
  }), " ", "Trim"))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { stripTagsFromString } from "@baggie/core";

const string = \`${string.replace(/`/g, "\\`")}\`;
${replaceWith === " " ? "" : `const replaceWith = "${replaceWith}";\n`}
const output = stripTagsFromString(input${replaceWith === " " ? trim ? "" : ", undefined" : ", replaceWith"}${trim ? "" : ", false"});
/*
output = ${JSON.stringify(output, null, 4)}
*/
`
  }));
};
//# sourceMappingURL=Example.js.map