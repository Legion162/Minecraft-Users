import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper, TextareaWithHighlights } from "@baggie/react";
import { substringHtmlEntitySafe } from "./substringHtmlEntitySafe";
export const Example = props => {
  const [input, setInput] = useState(props.defaultInput);
  const [start, setStart] = useState(props.start);
  const [end, setEnd] = useState(props.end);
  const [verbose, setVerbose] = useState(false);
  const {
    output,
    realIndexStart,
    realIndexEnd
  } = useMemo(() => substringHtmlEntitySafe(input, start, end, {
    verbose: true
  }), [input, start, end]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Input",
    labelForId: "input-input"
  }, /*#__PURE__*/React.createElement(TextareaWithHighlights, {
    id: "input-input",
    value: input,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setInput(target.value);
    },
    style: {
      width: "100%",
      maxWidth: "360px"
    },
    highlights: [realIndexStart, realIndexEnd],
    spellCheck: false,
    rows: 3
  })), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Index start",
    labelForId: "start-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "start-input",
    type: "number",
    value: start,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setStart(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Index end",
    labelForId: "end-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "end-input",
    type: "number",
    value: end,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setEnd(target.valueAsNumber);
    }
  }))), /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: verbose,
    onChange: () => setVerbose(current => !current)
  }), "Verbose")), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { substringHtmlEntitySafe } from "@baggie/core";

const input = \`${input.replace(/`/g, "\\`")}\`;

const indexStart = ${start || 0};
const indexEnd = ${isNaN(end) ? "undefined" : end};

const output = substringHtmlEntitySafe(input, indexStart, indexEnd${verbose ? ", { verbose: true }" : ""});
/*
${verbose ? `output = ${JSON.stringify({
      output,
      realIndexStart,
      realIndexEnd
    }, null, 4)}` : `output = \`${output}\``}
*/
`
  }));
};
//# sourceMappingURL=Example.js.map