import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { getPasswordRegex, passwordSpecialCharactersDefault } from "./getPasswordRegex";
export const Example = props => {
  const [password, setPassword] = useState(props.password || "");
  const [minLength, setMinLength] = useState();
  const [maxLength, setMaxLength] = useState();
  const [minDigits, setMinDigits] = useState();
  const [minLowercase, setMinLowercase] = useState();
  const [minUppercase, setMinUppercase] = useState();
  const [minSpecial, setMinSpecial] = useState();
  const [specialCharacters, setSpecialCharacters] = useState();
  const [forbiddenCharacters, setForbiddenCharacters] = useState();
  const [allowUnicode, setAllowUnicode] = useState(false);
  const {
    options,
    isValid
  } = useMemo(() => {
    const optionsObj = {
      minLength,
      maxLength,
      minDigits,
      minLowercase,
      minUppercase,
      minSpecial,
      specialCharacters,
      forbiddenCharacters,
      allowUnicode
    };
    return {
      options: Object.fromEntries(Object.entries(optionsObj).filter(entry => typeof entry[1] !== "undefined" && entry[1] !== false)),
      isValid: getPasswordRegex(optionsObj).test(password)
    };
  }, [password, minLength, maxLength, minDigits, minLowercase, minUppercase, minSpecial, specialCharacters, forbiddenCharacters, allowUnicode]);
  const hasOptionSet = Object.keys(options).length;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Password",
    labelForId: "password-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "password-input",
    value: password,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setPassword(target.value);
    },
    spellCheck: false
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Is valid",
    labelForId: undefined
  }, isValid ? "true" : "false")), /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "10px",
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Min length",
    labelForId: "minLength"
  }, /*#__PURE__*/React.createElement("input", {
    id: "minLength",
    type: "number",
    value: isNaN(minLength) ? "" : minLength,
    placeholder: Math.min(8, typeof maxLength === "undefined" ? 8 : maxLength).toString(),
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setMinLength(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Max length",
    labelForId: "maxLength"
  }, /*#__PURE__*/React.createElement("input", {
    id: "maxLength",
    type: "number",
    value: isNaN(maxLength) ? "" : maxLength,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setMaxLength(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Min digits",
    labelForId: "minDigits"
  }, /*#__PURE__*/React.createElement("input", {
    id: "minDigits",
    type: "number",
    value: isNaN(minDigits) ? "" : minDigits,
    placeholder: "1",
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setMinDigits(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Min lowercase",
    labelForId: "minLowercase"
  }, /*#__PURE__*/React.createElement("input", {
    id: "minLowercase",
    type: "number",
    value: isNaN(minLowercase) ? "" : minLowercase,
    placeholder: "1",
    onChange: _ref5 => {
      let {
        target
      } = _ref5;
      return setMinLowercase(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Min uppercase",
    labelForId: "minUppercase"
  }, /*#__PURE__*/React.createElement("input", {
    id: "minUppercase",
    type: "number",
    value: isNaN(minUppercase) ? "" : minUppercase,
    placeholder: "1",
    onChange: _ref6 => {
      let {
        target
      } = _ref6;
      return setMinUppercase(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Min special",
    labelForId: "minSpecial"
  }, /*#__PURE__*/React.createElement("input", {
    id: "minSpecial",
    type: "number",
    value: isNaN(minSpecial) ? "" : minSpecial,
    placeholder: "1",
    onChange: _ref7 => {
      let {
        target
      } = _ref7;
      return setMinSpecial(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Special characters",
    labelForId: "specialCharacters"
  }, /*#__PURE__*/React.createElement("input", {
    id: "specialCharacters",
    value: specialCharacters || "",
    placeholder: passwordSpecialCharactersDefault,
    onChange: _ref8 => {
      let {
        target
      } = _ref8;
      return setSpecialCharacters(target.value || undefined);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Forbidden characters",
    labelForId: "forbiddenCharacters"
  }, /*#__PURE__*/React.createElement("input", {
    id: "forbiddenCharacters",
    value: forbiddenCharacters || "",
    onChange: _ref9 => {
      let {
        target
      } = _ref9;
      return setForbiddenCharacters(target.value || undefined);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Allow unicode",
    labelForId: "allowUnicode"
  }, /*#__PURE__*/React.createElement("input", {
    id: "allowUnicode",
    type: "checkbox",
    checked: allowUnicode,
    onChange: () => setAllowUnicode(current => !current)
  }))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { getPasswordRegex } from "@baggie/core";

const password = \`${password.replace(/`/g, "\\`")}\`;
${hasOptionSet ? `const options = ${JSON.stringify(options, null, 4)};\n` : ""}
const isValid = getPasswordRegex(${hasOptionSet ? "options" : ""}).test(password);
// isValid = ${isValid ? "true" : "false"}
`
  }), /*#__PURE__*/React.createElement("b", null, "The returned regex:"), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `new RegExp("${getPasswordRegex(options).source}", "${getPasswordRegex(options).flags}")`
  }));
};
//# sourceMappingURL=Example.js.map