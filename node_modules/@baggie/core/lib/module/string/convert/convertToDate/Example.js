import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { convertToDate } from "./convertToDate";
export const Example = props => {
  const [date, setDate] = useState(props.date);
  const [zeroBasedMonth, setZeroBasedMonth] = useState(props.zeroBasedMonth || false);
  const [monthBeforeDay, setMonthBeforeDay] = useState(props.monthBeforeDay || false);
  const returnedDate = useMemo(() => convertToDate(date, {
    zeroBasedMonth,
    monthBeforeDay
  }), [date, zeroBasedMonth, monthBeforeDay]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      gap: "10px"
    }
  }, typeof date === "string" ? /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Date",
    labelForId: "date"
  }, /*#__PURE__*/React.createElement("input", {
    id: "date-input",
    value: date,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setDate(target.value);
    },
    spellCheck: false
  })) : /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Day",
    labelForId: "day"
  }, /*#__PURE__*/React.createElement("input", {
    id: "day-input",
    type: "number",
    value: date.day,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setDate(current => ({
        ...current,
        day: target.valueAsNumber
      }));
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Month",
    labelForId: "month"
  }, /*#__PURE__*/React.createElement("input", {
    id: "month-input",
    type: "number",
    value: date.month,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setDate(current => ({
        ...current,
        month: target.valueAsNumber
      }));
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Year",
    labelForId: "year"
  }, /*#__PURE__*/React.createElement("input", {
    id: "year-input",
    type: "number",
    value: date.year,
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setDate(current => ({
        ...current,
        year: target.valueAsNumber
      }));
    }
  }))), /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: zeroBasedMonth,
    onChange: () => setZeroBasedMonth(current => !current)
  }), " ", "Zero based month"), typeof date === "string" && /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: monthBeforeDay,
    onChange: () => setMonthBeforeDay(current => !current)
  }), " ", "Month before date")), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { convertToDate } from "@baggie/core";

const date = ${typeof date === "string" ? `"${date}"` : JSON.stringify(date, null, 4)};
${monthBeforeDay || zeroBasedMonth ? `const options = {
${monthBeforeDay ? "    monthBeforeDay: true,\n" : ""}${zeroBasedMonth ? "    zeroBasedMonth: true,\n" : ""}};\n` : ""}
const returnedDate = convertToDate(date${monthBeforeDay || zeroBasedMonth ? ", options" : ""});
// ${returnedDate ? `returnedDate.toISOString() = "${returnedDate.toISOString()}"` : "returnedDate = undefined"}
`
  }));
};
//# sourceMappingURL=Example.js.map