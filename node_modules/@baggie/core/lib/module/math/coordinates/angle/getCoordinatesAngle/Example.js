import React, { useMemo, useState } from "react";
import { InputWrapper } from "@baggie/react";
import { Source } from "@storybook/blocks";
import { ceilToMultipleOf } from "../../../rounding/ceilToMultipleOf/ceilToMultipleOf";
import { floorToMultipleOf } from "../../../rounding/floorToMultipleOf/floorToMultipleOf";
import { getPercentageBetween } from "../../../percentage/getPercentageBetween/getPercentageBetween";
import { getPositionBetween } from "../../../percentage/getPositionBetween/getPositionBetween";
import { getPercentage } from "../../../percentage/getPercentage/getPercentage";
import { getDistance } from "../../distance/getDistance";
import { getCoordinatesAngle } from "./getCoordinatesAngle";
export const Example = props => {
  const [fromX, setFromX] = useState(props.from.x);
  const [fromY, setFromY] = useState(props.from.y);
  const [toX, setToX] = useState(props.to.x);
  const [toY, setToY] = useState(props.to.y);
  const [offset, setOffset] = useState(0);
  const [clockwise, setClockwise] = useState(false);
  const angle = useMemo(() => getCoordinatesAngle({
    x: fromX,
    y: fromY
  }, {
    x: toX,
    y: toY
  }, {
    offset,
    clockwise
  }), [fromX, fromY, toX, toY, offset, clockwise]);
  const csXMin = floorToMultipleOf(Math.min(fromY, toY, fromX, toX) - 20, 20);
  const csXMax = ceilToMultipleOf(Math.max(fromY, toY, fromX, toX) + 20, 20);
  const csYMin = floorToMultipleOf(Math.min(fromY, toY, fromX, toX) - 20, 20);
  const csYMax = ceilToMultipleOf(Math.max(fromY, toY, fromX, toX) + 20, 20);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("legend", null, "From"), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "X",
    labelForId: "from-x-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "from-x-input",
    value: fromX,
    type: "number",
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setFromX(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Y",
    labelForId: "from-y-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "from-y-input",
    value: fromY,
    type: "number",
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setFromY(target.valueAsNumber || 0);
    }
  }))), /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("legend", null, "To"), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "X",
    labelForId: "to-x-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "to-x-input",
    value: toX,
    type: "number",
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setToX(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Y",
    labelForId: "to-y-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "to-y-input",
    value: toY,
    type: "number",
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setToY(target.valueAsNumber || 0);
    }
  }))), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Offset",
    labelForId: "offset-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "offset-input",
    value: offset,
    type: "number",
    onChange: _ref5 => {
      let {
        target
      } = _ref5;
      return setOffset(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Angle",
    labelForId: undefined
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, angle))), /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: clockwise,
    onChange: () => setClockwise(current => !current)
  }), " ", "Clockwise"), /*#__PURE__*/React.createElement("div", {
    style: {
      display: "grid",
      gridTemplateColumns: "min-content 1fr",
      gridTemplateRows: "1fr min-content",
      marginTop: "20px",
      pointerEvents: "none",
      userSelect: "none"
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      paddingRight: "5px",
      textAlign: "right",
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-between"
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      transform: "translateY(-0.5em)"
    }
  }, csYMax), /*#__PURE__*/React.createElement("div", null, getPositionBetween(csYMax, csYMin, 0.5)), /*#__PURE__*/React.createElement("div", {
    style: {
      transform: "translateY(0.5em)"
    }
  }, csYMin)), /*#__PURE__*/React.createElement("div", {
    style: {
      background: "#FC0",
      boxShadow: "0 0 0 1px #FC0",
      width: "200px",
      height: "200px",
      position: "relative",
      overflow: "hidden"
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      position: "absolute",
      top: `${100 - getPercentageBetween(fromY, {
        from: csYMin,
        to: csYMax
      }) * 100}%`,
      left: `${getPercentageBetween(fromX, {
        from: csXMin,
        to: csXMax
      }) * 100}%`,
      width: `${getPercentage({
        part: getDistance({
          x: fromX,
          y: fromY
        }, {
          x: toX,
          y: toY
        }),
        whole: getDistance({
          x: csXMin,
          y: csYMin
        }, {
          x: csXMax,
          y: csYMax
        })
      }) * 100 * Math.sqrt(2) * 2}%`,
      height: `${getPercentage({
        part: getDistance({
          x: fromX,
          y: fromY
        }, {
          x: toX,
          y: toY
        }),
        whole: getDistance({
          x: csXMin,
          y: csYMin
        }, {
          x: csXMax,
          y: csYMax
        })
      }) * 100 * Math.sqrt(2) * 2}%`,
      transform: "translate(-50%, -50%)",
      backgroundImage: `conic-gradient(from ${clockwise ? offset + (270 - angle) : -90 - offset}deg, #fff ${angle}deg, #fff5 ${angle}deg)`,
      borderRadius: "50%"
    }
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      position: "absolute",
      left: "50%",
      height: "100%",
      borderRight: "1px dashed #fff"
    }
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      position: "absolute",
      top: "50%",
      width: "100%",
      borderTop: "1px dashed #fff"
    }
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      position: "absolute",
      top: `${100 - getPercentageBetween(fromY, {
        from: csYMin,
        to: csYMax
      }) * 100}%`,
      left: `${getPercentageBetween(fromX, {
        from: csXMin,
        to: csXMax
      }) * 100}%`,
      boxShadow: "0 0 0 5px #000"
    }
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      position: "absolute",
      top: `${100 - getPercentageBetween(toY, {
        from: csYMin,
        to: csYMax
      }) * 100}%`,
      left: `${getPercentageBetween(toX, {
        from: csXMin,
        to: csXMax
      }) * 100}%`,
      boxShadow: "0 0 0 5px #c00"
    }
  })), /*#__PURE__*/React.createElement("div", null), /*#__PURE__*/React.createElement("div", {
    style: {
      width: "200px",
      paddingRight: "5px",
      display: "grid",
      gridTemplateColumns: "repeat(3, 1fr)"
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      transform: "translateX(-1000cw)"
    }
  }, csXMin), /*#__PURE__*/React.createElement("div", {
    style: {
      textAlign: "center"
    }
  }, getPositionBetween(csXMax, csXMin, 0.5)), /*#__PURE__*/React.createElement("div", {
    style: {
      textAlign: "right"
    }
  }, csXMax))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { getCoordinatesAngle } from "@baggie/core";

const from = { x: ${fromX}, y: ${fromY} };
const to = { x: ${toX}, y: ${toY} };

const angle = getCoordinatesAngle(from, to);
// angle = ${angle}
`
  }));
};
//# sourceMappingURL=Example.js.map