import React, { useMemo, useState } from "react";
import { InputWrapper } from "@baggie/react";
import { Source } from "@storybook/blocks";
import { getPointsOnCircle } from "./getPointsOnCircle";
export const Example = props => {
  const [radius, setRadius] = useState(props.radius);
  const [numberOfPoints, setNumberOfPoints] = useState(props.numberOfPoints);
  const [offset, setOffset] = useState(props.offset);
  const points = useMemo(() => getPointsOnCircle({
    radius: radius || 1,
    numberOfPoints: Math.min(numberOfPoints || 0, 30),
    offset: offset || 0
  }), [radius, numberOfPoints, offset]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Radius",
    labelForId: "radius-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "radius-input",
    type: "number",
    value: radius,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setRadius(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Number of points",
    labelForId: "points-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "points-input",
    type: "number",
    max: 30,
    value: numberOfPoints,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setNumberOfPoints(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Offset",
    labelForId: "offset-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "offset-input",
    type: "number",
    value: offset,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setOffset(target.valueAsNumber);
    }
  }))), /*#__PURE__*/React.createElement("div", {
    style: {
      aspectRatio: 1,
      background: "#FC0",
      marginTop: "20px",
      borderRadius: "50%",
      position: "relative",
      display: "inline-grid",
      gridTemplateColumns: "1fr 1fr",
      alignItems: "center",
      pointerEvents: "none",
      userSelect: "none"
    }
  }, points.map((point, index) => /*#__PURE__*/React.createElement("div", {
    key: index,
    style: {
      position: "absolute",
      top: "0%",
      left: "0%",
      width: "100%",
      height: "100%",
      transform: `rotate(${point.degrees}deg) translateY(-50%)`,
      transition: "all 0.4s ease-out"
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      position: "absolute",
      top: "calc(50% - 4px)",
      left: "calc(50% - 3px)",
      width: "6px",
      height: "2px",
      background: "#900"
    }
  }))), /*#__PURE__*/React.createElement("div", null), /*#__PURE__*/React.createElement("div", {
    style: {
      top: "-0.75em",
      padding: "0 10px",
      position: "relative",
      borderBottom: "1px solid #900"
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      lineHeight: "1.5em"
    }
  }, "r = ", radius || 1))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { getPointsOnCircle } from "@baggie/core";

const radius = ${radius || 1};
const numberOfPoints = ${Math.min(numberOfPoints || 0, 30)};
const offset = ${offset || 0};

const points = getPointsOnCircle({ radius, numberOfPoints, offset });
/*
points = ${JSON.stringify(points.slice(0, 5), null, 4).replace(/}$/m, numberOfPoints > 5 ? "},\n    ..." : "}")}
*/
`
  }));
};
//# sourceMappingURL=Example.js.map