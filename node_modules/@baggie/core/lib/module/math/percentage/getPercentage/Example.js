import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { getPercentage } from "./getPercentage";
export const Example = props => {
  const [part, setPart] = useState(props.part);
  const [percentage, setPercentage] = useState(props.percentage);
  const [whole, setWhole] = useState(props.whole);
  const [percentageAsDecimal, setPercentageAsDecimal] = useState(true);
  const [varsString, resultString, result] = useMemo(() => {
    const showPart = typeof part === "number";
    const showPercentage = typeof percentage === "number";
    const showWhole = typeof whole === "number";
    const partVar = showPart && `const part = ${part};`;
    const percentageVar = showPercentage && `const percentage = ${percentage};`;
    const wholeVar = showWhole && `const whole = ${whole};`;
    const result = getPercentage(
    // @ts-ignore
    {
      part: part,
      percentage: percentage,
      whole: whole
    }, percentageAsDecimal);
    const realPercentage = (showPercentage ? percentage : result) * (percentageAsDecimal ? 100 : 1);
    const percentageAsDecimalString = percentageAsDecimal ? "" : ", false";
    const partResult = !showPart && `
const part = getPercentage({ percentage, whole }${percentageAsDecimalString});
// part = ${result}

// ${realPercentage}% of ${whole} is ${result}`;
    const percentageResult = !showPercentage && `
const percentage = getPercentage({ part, whole }${percentageAsDecimalString});
// percentage = ${result}

// ${part} of ${whole} is ${realPercentage}%`;
    const wholeResult = !showWhole && `
const whole = getPercentage({ percentage, part }${percentageAsDecimalString});
// whole = ${result}

// ${part} is ${realPercentage}% of ${result}`;
    return [[partVar, percentageVar, wholeVar].filter(item => item).join("\n"), [partResult, percentageResult, wholeResult].filter(item => item).join("\n"), result];
  }, [part, percentage, whole, percentageAsDecimal]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, typeof part === "number" && /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Part",
    labelForId: "part-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "part-input",
    type: "number",
    value: part,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setPart(target.valueAsNumber || 0);
    }
  })), typeof percentage === "number" && /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Percentage",
    labelForId: "percentage-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "percentage-input",
    type: "number",
    step: 0.01,
    value: percentage,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setPercentage(target.valueAsNumber || 0);
    }
  })), typeof whole === "number" && /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Whole",
    labelForId: "whole-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "whole-input",
    type: "number",
    value: whole,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setWhole(target.valueAsNumber || 0);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: typeof part !== "number" ? "Part" : typeof percentage !== "number" ? "Percentage" : typeof whole !== "number" ? "Whole" : "",
    labelForId: undefined
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, result))), /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: percentageAsDecimal,
    onChange: () => setPercentageAsDecimal(current => !current)
  }), " ", "Percentage as decimal"), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { getPercentage } from "@baggie/core";

${varsString}
${resultString}
`
  }));
};
//# sourceMappingURL=Example.js.map