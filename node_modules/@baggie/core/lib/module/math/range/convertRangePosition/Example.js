import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { convertRangePosition } from "./convertRangePosition";
export const Example = props => {
  const [position, setPosition] = useState(props.position);
  const [fromFrom, setFromFrom] = useState(props.fromFrom);
  const [fromTo, setFromTo] = useState(props.fromTo);
  const [toFrom, setToFrom] = useState(props.toFrom);
  const [toTo, setToTo] = useState(props.toTo);
  const result = useMemo(() => convertRangePosition(position, {
    from: fromFrom,
    to: fromTo
  }, {
    from: toFrom,
    to: toTo
  }), [position, fromFrom, fromTo, toFrom, toTo]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Position",
    labelForId: "position-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "position-input",
    type: "number",
    value: position,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setPosition(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("legend", null, "From range"), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "From",
    labelForId: "from-from-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "from-from-input",
    type: "number",
    value: fromFrom,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setFromFrom(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "To",
    labelForId: "from-to-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "from-to-input",
    type: "number",
    value: fromTo,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setFromTo(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  }))), /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("legend", null, "To range"), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "From",
    labelForId: "to-from-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "to-from-input",
    type: "number",
    value: toFrom,
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setToFrom(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "To",
    labelForId: "to-to-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "to-to-input",
    type: "number",
    value: toTo,
    onChange: _ref5 => {
      let {
        target
      } = _ref5;
      return setToTo(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  }))), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Result",
    labelForId: undefined
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, result))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { convertRangePosition } from "@baggie/core";

const fromRange = { from: ${fromFrom}, to: ${fromTo} };
const toRange = { from: ${toFrom}, to: ${toTo} };

const newPosition = convertRangePosition(${position}, fromRange, toRange);
// newPosition = ${result}
`
  }));
};
//# sourceMappingURL=Example.js.map