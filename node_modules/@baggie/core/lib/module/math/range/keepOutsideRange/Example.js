import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { keepOutsideRange } from "./keepOutsideRange";
export const Example = props => {
  const [input, setInput] = useState(props.number);
  const [ranges, setRanges] = useState(props.ranges);
  const [combineEquals, setCombineEquals] = useState(true);
  const {
    realRanges,
    result
  } = useMemo(() => {
    const realRanges = ranges.replace(/][^[{]+/g, "]\n").replace(/}[^[{]+/g, "}\n").split("\n").map(item => {
      try {
        return JSON.parse(item.replace(/["`']/g, "").replace(/([a-z]+)/g, `"$1"`));
      } catch (err) {
        return undefined;
      }
    }).filter(x => x && (Array.isArray(x) && x.length === 2 || typeof x === "object" && typeof x.from === "number" && typeof x.to === "number"));
    const result = keepOutsideRange(input, realRanges, combineEquals);
    return {
      realRanges,
      result
    };
  }, [input, ranges, combineEquals]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Number",
    labelForId: "number-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "number-input",
    type: "number",
    value: input,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setInput(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Ranges",
    labelForId: "ranges-input"
  }, /*#__PURE__*/React.createElement("textarea", {
    id: "ranges-input",
    value: ranges,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setRanges(target.value);
    },
    style: {
      width: "100%",
      maxWidth: "360px"
    },
    autoComplete: "off",
    rows: 3
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Result",
    labelForId: undefined
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, result))), /*#__PURE__*/React.createElement("label", null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: combineEquals,
    onChange: () => setCombineEquals(current => !current)
  }), " ", "Combine equals"), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { keepOutsideRange } from "@baggie/core";

const range${realRanges.length === 1 ? "" : "s"} = ${realRanges.length === 1 ? JSON.stringify(realRanges[0], null, 4) : JSON.stringify(realRanges, null, 4)};

const result = keepOutsideRange(${input}, range${realRanges.length === 1 ? "" : "s"});
// result = ${result}
`
  }));
};
//# sourceMappingURL=Example.js.map