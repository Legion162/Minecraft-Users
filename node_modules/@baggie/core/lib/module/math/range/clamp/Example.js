import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { clamp } from "./clamp";
export const Example = props => {
  const [input, setInput] = useState(props.input);
  const [min, setMin] = useState(props.min);
  const [max, setMax] = useState(props.max);
  const result = useMemo(() => clamp(input, {
    min,
    max
  }), [input, min, max]);
  const settings = [typeof min === "number" ? `min: ${min}` : "", typeof max === "number" ? `max: ${max}` : ""].filter(x => x).join(", ");
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Input",
    labelForId: "input-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "input-input",
    type: "number",
    value: input,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setInput(target.valueAsNumber || 0);
    },
    autoComplete: "off"
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Min",
    labelForId: "min-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "min-input",
    type: "number",
    value: min,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setMin(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    },
    autoComplete: "off"
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Max",
    labelForId: "max-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "max-input",
    type: "number",
    value: max,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setMax(isNaN(target.valueAsNumber) ? undefined : target.valueAsNumber);
    },
    autoComplete: "off"
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Result",
    labelForId: undefined
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, result))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { clamp } from "@baggie/core";

const result = clamp(${input}, { ${settings} });
// result = ${result}
`
  }));
};
//# sourceMappingURL=Example.js.map