import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { roundToMultipleOf } from "./roundToMultipleOf";
export const Example = props => {
  const [number, setNumber] = useState(props.number);
  const [multipleOf, setMultipleOf] = useState(props.multipleOf);
  const result = useMemo(() => roundToMultipleOf(number, multipleOf), [number, multipleOf]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Number",
    labelForId: "number-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "number-input",
    type: "number",
    value: number,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setNumber(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Multiple of",
    labelForId: "multiple-of-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "multiple-of-input",
    type: "number",
    value: multipleOf,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setMultipleOf(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Result",
    labelForId: undefined
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, isNaN(result) ? "Error" : result))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { roundToMultipleOf } from "@baggie/core";

const number = ${number};
const multipleOf = ${multipleOf};

const result = roundToMultipleOf(number, multipleOf);
// result = ${result}
`
  }));
};
//# sourceMappingURL=Example.js.map