import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { ColorViewer } from "../../_components/ColorViewer/ColorViewer";
import { ColorInput } from "../../_components/ColorInput/ColorInput";
import { mixColors } from "./mixColors";
export const Example = props => {
  const [colorA, setColorA] = useState(props.colorA);
  const [colorB, setColorB] = useState(props.colorB);
  const [weight, setWeight] = useState(props.weight);
  const mixed = useMemo(() => mixColors(colorA, colorB, weight), [colorA, colorB, weight]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(ColorInput, {
    label: "Color A",
    value: colorA,
    onChange: setColorA
  }), /*#__PURE__*/React.createElement(ColorInput, {
    label: "Color B",
    value: colorB,
    onChange: setColorB
  }), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Weight",
    labelForId: "weight-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "weight-input",
    type: "range",
    value: weight,
    min: 0,
    max: 1,
    step: 0.01,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setWeight(target.valueAsNumber);
    }
  }), " ", weight.toFixed(2))), /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "25px"
    }
  }, /*#__PURE__*/React.createElement(ColorViewer, {
    color: mixed
  })), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { mixColors } from "@baggie/core";

const colorA = "${colorA}";
const colorB = "${colorB}";
const weight = ${weight};

const mixed = mixColors(colorA, colorB, weight);
// mixed = ${mixed ? `"${mixed}"` : "undefined"}
`
  }));
};
//# sourceMappingURL=Example.js.map