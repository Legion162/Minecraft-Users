function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useCallback, useId, useState } from "react";
import { InputWrapper } from "@baggie/react";
import { normalizeHexColor } from "../../convert/normalizeHexColor/normalizeHexColor";
import { convertColorNameToHex } from "../../convert/convertColorNameToHex/convertColorNameToHex";
import { isHexColor } from "../../check/isHexColor/isHexColor";
import S from "./ColorInput.module.scss";
export const ColorInput = /*#__PURE__*/React.forwardRef((props, ref) => {
  const [hasFocus, setHasFocus] = useState(false);
  const {
    id,
    onChange,
    onBlur,
    onFocus,
    onKeyDown,
    value,
    label,
    labelRight,
    helperText,
    invalid,
    className,
    ...inputProps
  } = props;
  const autoId = useId();
  const convertValue = useCallback(() => {
    const trimmed = value.trim();
    const startsWithHash = trimmed.startsWith("#");
    if (!startsWithHash) {
      const hex = convertColorNameToHex(trimmed) || `#${trimmed}`;
      if (isHexColor(hex)) {
        onChange(hex);
      }
    }
  }, [onChange, value]);
  const handleOnKeyDown = useCallback(event => {
    if (event.key === "Enter") {
      convertValue();
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [convertValue, onKeyDown]);
  const handleOnFocus = useCallback(event => {
    setHasFocus(true);
    if (onFocus) {
      onFocus(event);
    }
  }, [onFocus]);
  const handleOnBlur = useCallback(event => {
    setHasFocus(false);
    convertValue();
    if (onBlur) {
      onBlur(event);
    }
  }, [convertValue, onBlur]);
  return /*#__PURE__*/React.createElement(InputWrapper, {
    label: label,
    labelForId: id || autoId,
    labelRight: labelRight,
    helperText: helperText,
    invalid: invalid
  }, /*#__PURE__*/React.createElement("input", _extends({
    ref: ref,
    id: id || autoId,
    value: value,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return onChange(target.value);
    },
    onKeyDown: handleOnKeyDown,
    onFocus: handleOnFocus,
    onBlur: handleOnBlur,
    className: [S.textInput, className].join(" ").trim(),
    pattern: "^#((([0-9a-f]{3}){1,2})|(([0-9a-f]{4}){1,2}))$"
  }, inputProps)), /*#__PURE__*/React.createElement("input", {
    type: "color",
    value: normalizeHexColor(value).substring(0, 7),
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return onChange(target.value);
    },
    className: S.colorInput,
    tabIndex: hasFocus ? undefined : -1
  }));
});
ColorInput.displayName = "ColorInput";
//# sourceMappingURL=ColorInput.js.map