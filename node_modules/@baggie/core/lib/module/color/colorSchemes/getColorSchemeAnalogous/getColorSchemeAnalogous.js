import { convertHslToRgb } from "../../convert/convertHslToRgb/convertHslToRgb";
import { convertRgbToHsl } from "../../convert/convertRgbToHsl/convertRgbToHsl";
import { convertStringToRgb } from "../../convert/convertStringToRgb/convertStringToRgb";
import { convertRgbToHex } from "../../convert/convertRgbToHex/convertRgbToHex";

/**
 * Get an analogous color scheme.
 */
export const getColorSchemeAnalogous = function (color) {
  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
  let steps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;
  const hex = typeof color === "string" ? color : convertRgbToHex(color);
  const rgb = typeof color === "string" ? convertStringToRgb(color) : color;
  const {
    hue,
    saturation,
    lightness,
    alpha
  } = convertRgbToHsl(rgb);
  const colors = [hex];
  const step = 360 / steps;
  for (let i = 1; i <= count - 1; i += 1) {
    colors[colors.length] = convertRgbToHex(convertHslToRgb({
      hue: (hue + step * i) % 360,
      saturation,
      lightness,
      alpha
    }));
  }
  return colors;
};
//# sourceMappingURL=getColorSchemeAnalogous.js.map