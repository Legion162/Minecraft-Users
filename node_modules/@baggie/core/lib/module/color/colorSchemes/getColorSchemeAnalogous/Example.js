import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { ColorViewer } from "../../_components/ColorViewer/ColorViewer";
import { ColorInput } from "../../_components/ColorInput/ColorInput";
import { getColorSchemeAnalogous } from "./getColorSchemeAnalogous";
export const Example = props => {
  const [color, setColor] = useState(props.color);
  const [count, setCount] = useState(props.count);
  const [steps, setSteps] = useState(props.steps);
  const scheme = useMemo(() => {
    try {
      return getColorSchemeAnalogous(color, count, steps);
    } catch (err) {
      return [];
    }
  }, [color, count, steps]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(ColorInput, {
    label: "Color",
    value: color,
    onChange: setColor
  }), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Count",
    labelForId: "count-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "count-input",
    type: "number",
    value: count,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setCount(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Steps",
    labelForId: "steps-input",
    helperText: `Should be at least be the same as "count"`
  }, /*#__PURE__*/React.createElement("input", {
    id: "steps-input",
    type: "number",
    value: steps,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setSteps(target.valueAsNumber);
    }
  }))), /*#__PURE__*/React.createElement("div", {
    key: `${color}--${count}--${steps}`,
    style: {
      marginTop: "25px",
      display: "flex",
      flexWrap: "wrap",
      gap: "10px"
    }
  }, scheme.map(c => /*#__PURE__*/React.createElement(ColorViewer, {
    key: c,
    color: c
  }))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { getColorSchemeAnalogous } from "@baggie/core";

const color = "${color}";
const count = ${count};
const steps = ${steps};

const scheme = getColorSchemeAnalogous(color, count, steps);
/*
scheme = ${JSON.stringify(scheme, null, 4)}
*/
`
  }));
};
//# sourceMappingURL=Example.js.map