import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { ColorViewer } from "../../_components/ColorViewer/ColorViewer";
import { convertRgbToHex } from "../convertRgbToHex/convertRgbToHex";
import { convertHslToRgb } from "./convertHslToRgb";
export const Example = props => {
  const [hue, setHue] = useState(props.hue);
  const [saturation, setSaturation] = useState(props.saturation);
  const [lightness, setLightness] = useState(props.lightness);
  const [alpha, setAlpha] = useState(props.alpha);
  const {
    rgb,
    hex
  } = useMemo(() => {
    const rgb = convertHslToRgb({
      hue,
      saturation,
      lightness,
      alpha
    });
    return {
      rgb,
      hex: convertRgbToHex(rgb)
    };
  }, [hue, saturation, lightness, alpha]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Hue",
    labelRight: hue,
    labelForId: "hue-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "hue-input",
    type: "range",
    min: 0,
    max: 360,
    step: 1,
    value: hue,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setHue(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Saturation",
    labelRight: saturation,
    labelForId: "saturation-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "saturation-input",
    type: "range",
    min: 0,
    max: 1,
    step: 0.01,
    value: saturation,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setSaturation(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Lightness",
    labelRight: lightness,
    labelForId: "lightness-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "lightness-input",
    type: "range",
    min: 0,
    max: 1,
    step: 0.01,
    value: lightness,
    onChange: _ref3 => {
      let {
        target
      } = _ref3;
      return setLightness(target.valueAsNumber);
    }
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Alpha",
    labelRight: alpha.toFixed(2),
    labelForId: "alpha-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "alpha-input",
    type: "range",
    min: 0,
    max: 1,
    step: 0.01,
    value: alpha,
    onChange: _ref4 => {
      let {
        target
      } = _ref4;
      return setAlpha(target.valueAsNumber);
    }
  }))), /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "25px",
      display: "flex",
      gap: "10px",
      alignItems: "flex-start"
    }
  }, /*#__PURE__*/React.createElement(ColorViewer, {
    color: hex
  }), /*#__PURE__*/React.createElement("table", {
    style: {
      margin: 0
    }
  }, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("b", null, "Red:")), /*#__PURE__*/React.createElement("td", null, rgb.red)), /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("b", null, "Green:")), /*#__PURE__*/React.createElement("td", null, rgb.green)), /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("b", null, "Blue:")), /*#__PURE__*/React.createElement("td", null, rgb.blue)), /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement("b", null, "Alpha:")), /*#__PURE__*/React.createElement("td", null, rgb.alpha))))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { convertHslToRgb } from "@baggie/core";

const hsl = {
   hue: ${hue},
   saturation: ${saturation},
   lightness: ${lightness},
   alpha: ${alpha},
};

const rgb = convertHslToRgb(hsl);
/*
rgb = ${JSON.stringify(rgb, null, 4)}
*/
`
  }));
};
//# sourceMappingURL=Example.js.map