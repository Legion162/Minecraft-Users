/**
 * An alternative to `setTimeout` that can be paused, resumed and reset.
 *
 * @example
 * **Basic usage:**
 * ```ts
 * import { Timer } from "@baggie/core";
 *
 * // Create a timer that executes a function after 2 seconds
 * const timer = new Timer((a, b) => {
 *     window.console.log(`${a}, ${b}`);
 * }, 2000, "Hello", "friend");
 *
 * // Start timer
 * timer.start();
 *
 * // Pause timer after 1 second
 * setTimeout(() => {
 *     timer.pause();
 *
 *     // And resume it after 3 seconds
 *     setTimeout(() => {
 *         timer.start();
 *     }, 3000);
 * }, 1000);
 *
 * // After 5 seconds the function will output "Hello, friend" to the console.
 * ```
 */
export class Timer {
  constructor(callback) {
    let timeoutMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    for (var _len = arguments.length, parameters = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      parameters[_key - 2] = arguments[_key];
    }
    this.startMs = 0;
    this.durationMs = timeoutMs;
    this.remainingMs = timeoutMs;
    this.parameters = parameters;
    this.callback = callback;
  }
  pause() {
    window.clearTimeout(this.timerId);
    this.remainingMs -= new Date().getTime() - this.startMs;
  }
  start() {
    this.startMs = new Date().getTime();
    window.clearTimeout(this.timerId);
    this.timerId = window.setTimeout(() => this.done(), this.remainingMs, ...this.parameters);
  }
  reset() {
    this.destroy();
    this.startMs = 0;
    this.remainingMs = this.durationMs;
  }
  done() {
    this.callback();
  }
  destroy() {
    window.clearTimeout(this.timerId);
  }
}
//# sourceMappingURL=timer.js.map