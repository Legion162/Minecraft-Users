import React, { useMemo, useState } from "react";
import { Source } from "@storybook/blocks";
import { InputWrapper } from "@baggie/react";
import { intersperse } from "./intersperse";
export const Example = props => {
  const [array, setArray] = useState(props.array);
  const [insertion, setInsertion] = useState(props.insertion);
  const {
    splitArray,
    splitInsertion,
    output
  } = useMemo(() => {
    const splitArray = array.split(/\s*,\s*/).filter(part => part !== "");
    const splitInsertion = insertion.split(/\s*,\s*/).filter(part => part !== "");
    const output = intersperse(splitArray, ...splitInsertion);
    return {
      splitArray,
      splitInsertion,
      output
    };
  }, [array, insertion]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: "flex",
      gap: "10px"
    }
  }, /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Array",
    labelForId: "array-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "array-input",
    value: array,
    onChange: _ref => {
      let {
        target
      } = _ref;
      return setArray(target.value);
    },
    spellCheck: false
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Insertion",
    labelForId: "insertion-input"
  }, /*#__PURE__*/React.createElement("input", {
    id: "insertion-input",
    value: insertion,
    onChange: _ref2 => {
      let {
        target
      } = _ref2;
      return setInsertion(target.value);
    },
    spellCheck: false
  })), /*#__PURE__*/React.createElement(InputWrapper, {
    label: "Output",
    labelForId: undefined
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      padding: "5px 0"
    }
  }, /*#__PURE__*/React.createElement("code", null, JSON.stringify(output))))), /*#__PURE__*/React.createElement(Source, {
    dark: true,
    code: `
import { intersperse } from "@baggie/core";

const array = ${JSON.stringify(splitArray)};
const insertion = ${JSON.stringify(splitInsertion.length === 1 ? splitInsertion[0] : splitInsertion)};

const output = intersperse(array, ${splitInsertion.length === 1 ? "" : "..."}insertion);
/*
output = ${JSON.stringify(output, null, 4)}
*/
`
  }));
};
//# sourceMappingURL=Example.js.map