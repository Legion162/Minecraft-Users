/**
 * An alternative to `setTimeout` that can be paused, resumed and reset.
 *
 * @example
 * **Basic usage:**
 * ```ts
 * import { Timer } from "@baggie/core";
 *
 * // Create a timer that executes a function after 2 seconds
 * const timer = new Timer((a, b) => {
 *     window.console.log(`${a}, ${b}`);
 * }, 2000, "Hello", "friend");
 *
 * // Start timer
 * timer.start();
 *
 * // Pause timer after 1 second
 * setTimeout(() => {
 *     timer.pause();
 *
 *     // And resume it after 3 seconds
 *     setTimeout(() => {
 *         timer.start();
 *     }, 3000);
 * }, 1000);
 *
 * // After 5 seconds the function will output "Hello, friend" to the console.
 * ```
 */
export declare class Timer {
    protected startMs: number;
    protected durationMs: number;
    protected remainingMs: number;
    protected parameters: any[];
    protected callback: (...parameters: any[]) => void;
    protected timerId?: number;
    constructor(callback: (...parameters: any[]) => void, timeoutMs?: number, ...parameters: any[]);
    pause(): void;
    start(): void;
    reset(): void;
    protected done(): void;
    destroy(): void;
}
//# sourceMappingURL=timer.d.ts.map